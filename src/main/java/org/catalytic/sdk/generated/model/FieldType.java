/*
 * Catalytic SDK API
 *  ## API for the Catalytic SDK 
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: developers@catalytic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.catalytic.sdk.generated.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Represents the types of data that may be stored in Fields.
 */
@JsonAdapter(FieldType.Adapter.class)
public enum FieldType {
  
  UNDEFINED("undefined"),
  
  TEXT("text"),
  
  INTEGER("integer"),
  
  DECIMAL("decimal"),
  
  DATE("date"),
  
  DATETIME("dateTime"),
  
  JSON("json"),
  
  BOOL("bool"),
  
  SINGLECHOICE("singleChoice"),
  
  MULTIPLECHOICE("multipleChoice"),
  
  INSTRUCTIONS("instructions"),
  
  FILE("file"),
  
  TABLE("table"),
  
  WORKFLOW("workflow"),
  
  INSTANCE("instance"),
  
  USER("user");

  private String value;

  FieldType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FieldType fromValue(String value) {
    for (FieldType b : FieldType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FieldType> {
    @Override
    public void write(final JsonWriter jsonWriter, final FieldType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FieldType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FieldType.fromValue(value);
    }
  }
}


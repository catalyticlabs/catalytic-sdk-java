/*
 * Catalytic SDK API
 *  ## API for the Catalytic SDK 
 *
 * The version of the OpenAPI document: 1.0.6
 * Contact: developers@catalytic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.catalytic.sdk.generated.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.catalytic.sdk.generated.model.Field;
import org.catalytic.sdk.generated.model.IntegrationConnection;

/**
 * Integration
 */

public class Integration {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REFERENCE_NAME = "referenceName";
  @SerializedName(SERIALIZED_NAME_REFERENCE_NAME)
  private String referenceName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IS_CUSTOM_INTEGRATION = "isCustomIntegration";
  @SerializedName(SERIALIZED_NAME_IS_CUSTOM_INTEGRATION)
  private Boolean isCustomIntegration;

  public static final String SERIALIZED_NAME_CONNECTIONS = "connections";
  @SerializedName(SERIALIZED_NAME_CONNECTIONS)
  private List<IntegrationConnection> connections = null;

  public static final String SERIALIZED_NAME_CONNECTION_PARAMS = "connectionParams";
  @SerializedName(SERIALIZED_NAME_CONNECTION_PARAMS)
  private List<Field> connectionParams = null;


  public Integration id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The unique ID of the Integration
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique ID of the Integration")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Integration referenceName(String referenceName) {
    
    this.referenceName = referenceName;
    return this;
  }

   /**
   * Get referenceName
   * @return referenceName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReferenceName() {
    return referenceName;
  }


  public void setReferenceName(String referenceName) {
    this.referenceName = referenceName;
  }


  public Integration name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The display Name of the Integration
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The display Name of the Integration")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Integration isCustomIntegration(Boolean isCustomIntegration) {
    
    this.isCustomIntegration = isCustomIntegration;
    return this;
  }

   /**
   * Boolean indicating whether this Integration Defintion is custom to your Catalytic team.  Only custom Integrations can be updated using the SDK.
   * @return isCustomIntegration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Boolean indicating whether this Integration Defintion is custom to your Catalytic team.  Only custom Integrations can be updated using the SDK.")

  public Boolean getIsCustomIntegration() {
    return isCustomIntegration;
  }


  public void setIsCustomIntegration(Boolean isCustomIntegration) {
    this.isCustomIntegration = isCustomIntegration;
  }


  public Integration connections(List<IntegrationConnection> connections) {
    
    this.connections = connections;
    return this;
  }

  public Integration addConnectionsItem(IntegrationConnection connectionsItem) {
    if (this.connections == null) {
      this.connections = new ArrayList<>();
    }
    this.connections.add(connectionsItem);
    return this;
  }

   /**
   * The List of Integration Connections using this Integration
   * @return connections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The List of Integration Connections using this Integration")

  public List<IntegrationConnection> getConnections() {
    return connections;
  }


  public void setConnections(List<IntegrationConnection> connections) {
    this.connections = connections;
  }


  public Integration connectionParams(List<Field> connectionParams) {
    
    this.connectionParams = connectionParams;
    return this;
  }

  public Integration addConnectionParamsItem(Field connectionParamsItem) {
    if (this.connectionParams == null) {
      this.connectionParams = new ArrayList<>();
    }
    this.connectionParams.add(connectionParamsItem);
    return this;
  }

   /**
   * The values required to create a new
   * @return connectionParams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The values required to create a new")

  public List<Field> getConnectionParams() {
    return connectionParams;
  }


  public void setConnectionParams(List<Field> connectionParams) {
    this.connectionParams = connectionParams;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Integration integration = (Integration) o;
    return Objects.equals(this.id, integration.id) &&
        Objects.equals(this.referenceName, integration.referenceName) &&
        Objects.equals(this.name, integration.name) &&
        Objects.equals(this.isCustomIntegration, integration.isCustomIntegration) &&
        Objects.equals(this.connections, integration.connections) &&
        Objects.equals(this.connectionParams, integration.connectionParams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, referenceName, name, isCustomIntegration, connections, connectionParams);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Integration {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    referenceName: ").append(toIndentedString(referenceName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isCustomIntegration: ").append(toIndentedString(isCustomIntegration)).append("\n");
    sb.append("    connections: ").append(toIndentedString(connections)).append("\n");
    sb.append("    connectionParams: ").append(toIndentedString(connectionParams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


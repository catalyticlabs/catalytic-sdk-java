/*
 * Catalytic SDK API
 *  ## API for the Catalytic SDK 
 *
 * The version of the OpenAPI document: 1.0.6
 * Contact: developers@catalytic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.catalytic.sdk.generated.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.catalytic.sdk.generated.model.FieldUpdateRequest;

/**
 * A request to create a new IntegrationConnection
 */
@ApiModel(description = "A request to create a new IntegrationConnection")

public class IntegrationConnectionCreationRequest {
  public static final String SERIALIZED_NAME_INTEGRATION_ID = "integrationId";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_ID)
  private String integrationId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CONNECTION_PARAMS = "connectionParams";
  @SerializedName(SERIALIZED_NAME_CONNECTION_PARAMS)
  private List<FieldUpdateRequest> connectionParams = null;


  public IntegrationConnectionCreationRequest integrationId(String integrationId) {
    
    this.integrationId = integrationId;
    return this;
  }

   /**
   * The Id of the Integration with which the Connection will be created
   * @return integrationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Id of the Integration with which the Connection will be created")

  public String getIntegrationId() {
    return integrationId;
  }


  public void setIntegrationId(String integrationId) {
    this.integrationId = integrationId;
  }


  public IntegrationConnectionCreationRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The display Name to apply to the new Integration Connection
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The display Name to apply to the new Integration Connection")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public IntegrationConnectionCreationRequest connectionParams(List<FieldUpdateRequest> connectionParams) {
    
    this.connectionParams = connectionParams;
    return this;
  }

  public IntegrationConnectionCreationRequest addConnectionParamsItem(FieldUpdateRequest connectionParamsItem) {
    if (this.connectionParams == null) {
      this.connectionParams = new ArrayList<>();
    }
    this.connectionParams.add(connectionParamsItem);
    return this;
  }

   /**
   * Parameters used to create an Integration Connection
   * @return connectionParams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Parameters used to create an Integration Connection")

  public List<FieldUpdateRequest> getConnectionParams() {
    return connectionParams;
  }


  public void setConnectionParams(List<FieldUpdateRequest> connectionParams) {
    this.connectionParams = connectionParams;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationConnectionCreationRequest integrationConnectionCreationRequest = (IntegrationConnectionCreationRequest) o;
    return Objects.equals(this.integrationId, integrationConnectionCreationRequest.integrationId) &&
        Objects.equals(this.name, integrationConnectionCreationRequest.name) &&
        Objects.equals(this.connectionParams, integrationConnectionCreationRequest.connectionParams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(integrationId, name, connectionParams);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationConnectionCreationRequest {\n");
    sb.append("    integrationId: ").append(toIndentedString(integrationId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    connectionParams: ").append(toIndentedString(connectionParams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


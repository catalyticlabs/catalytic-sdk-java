/*
 * Catalytic SDK API
 *  ## API for the Catalytic SDK 
 *
 * The version of the OpenAPI document: 1.0.6
 * Contact: developers@catalytic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.catalytic.sdk.generated.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.catalytic.sdk.generated.model.Field;
import org.catalytic.sdk.generated.model.FieldVisibility;
import org.catalytic.sdk.generated.model.InstanceVisibilty;

/**
 * A Workflow is an automation on the Catalytic platform. It is a template  of the process you want to run each time your Workflow is started.
 */
@ApiModel(description = "A Workflow is an automation on the Catalytic platform. It is a template  of the process you want to run each time your Workflow is started.")

public class Workflow {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TEAM_NAME = "teamName";
  @SerializedName(SERIALIZED_NAME_TEAM_NAME)
  private String teamName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_INPUT_FIELDS = "inputFields";
  @SerializedName(SERIALIZED_NAME_INPUT_FIELDS)
  private List<Field> inputFields = null;

  public static final String SERIALIZED_NAME_IS_PUBLISHED = "isPublished";
  @SerializedName(SERIALIZED_NAME_IS_PUBLISHED)
  private Boolean isPublished;

  public static final String SERIALIZED_NAME_IS_ARCHIVED = "isArchived";
  @SerializedName(SERIALIZED_NAME_IS_ARCHIVED)
  private Boolean isArchived;

  public static final String SERIALIZED_NAME_FIELD_VISIBILITY = "fieldVisibility";
  @SerializedName(SERIALIZED_NAME_FIELD_VISIBILITY)
  private FieldVisibility fieldVisibility;

  public static final String SERIALIZED_NAME_INSTANCE_VISIBILITY = "instanceVisibility";
  @SerializedName(SERIALIZED_NAME_INSTANCE_VISIBILITY)
  private InstanceVisibilty instanceVisibility;

  public static final String SERIALIZED_NAME_ADMIN_USERS = "adminUsers";
  @SerializedName(SERIALIZED_NAME_ADMIN_USERS)
  private List<String> adminUsers = null;

  public static final String SERIALIZED_NAME_STANDARD_USERS = "standardUsers";
  @SerializedName(SERIALIZED_NAME_STANDARD_USERS)
  private List<String> standardUsers = null;

  public static final String SERIALIZED_NAME_TASK_COUNT_LIMIT = "taskCountLimit";
  @SerializedName(SERIALIZED_NAME_TASK_COUNT_LIMIT)
  private Integer taskCountLimit;

  public static final String SERIALIZED_NAME_FIELD_COUNT_LIMIT = "fieldCountLimit";
  @SerializedName(SERIALIZED_NAME_FIELD_COUNT_LIMIT)
  private Integer fieldCountLimit;

  public static final String SERIALIZED_NAME_FIELD_SIZE_LIMIT = "fieldSizeLimit";
  @SerializedName(SERIALIZED_NAME_FIELD_SIZE_LIMIT)
  private Integer fieldSizeLimit;

  public static final String SERIALIZED_NAME_FIELD_TOTAL_SIZE_LIMIT = "fieldTotalSizeLimit";
  @SerializedName(SERIALIZED_NAME_FIELD_TOTAL_SIZE_LIMIT)
  private Integer fieldTotalSizeLimit;

  public static final String SERIALIZED_NAME_DATA_TABLE_ROW_LIMIT = "dataTableRowLimit";
  @SerializedName(SERIALIZED_NAME_DATA_TABLE_ROW_LIMIT)
  private Integer dataTableRowLimit;

  public static final String SERIALIZED_NAME_DATA_TABLE_COLUMN_LIMIT = "dataTableColumnLimit";
  @SerializedName(SERIALIZED_NAME_DATA_TABLE_COLUMN_LIMIT)
  private Integer dataTableColumnLimit;

  public static final String SERIALIZED_NAME_DATA_TABLE_CELL_LIMIT = "dataTableCellLimit";
  @SerializedName(SERIALIZED_NAME_DATA_TABLE_CELL_LIMIT)
  private Integer dataTableCellLimit;


  public Workflow id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * The unique ID of the Workflow
   * @return id
  **/
  @ApiModelProperty(required = true, value = "The unique ID of the Workflow")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public Workflow name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The descriptive name of the Workflow
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The descriptive name of the Workflow")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Workflow teamName(String teamName) {
    
    this.teamName = teamName;
    return this;
  }

   /**
   * The name of the team in which the Workflow is defined
   * @return teamName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The name of the team in which the Workflow is defined")

  public String getTeamName() {
    return teamName;
  }


  public void setTeamName(String teamName) {
    this.teamName = teamName;
  }


  public Workflow description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A description of what the Workflow does
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description of what the Workflow does")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Workflow category(String category) {
    
    this.category = category;
    return this;
  }

   /**
   * A descriptive grouping for your Workflow
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A descriptive grouping for your Workflow")

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    this.category = category;
  }


  public Workflow owner(String owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * The email address of the user who owns this Workflow
   * @return owner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email address of the user who owns this Workflow")

  public String getOwner() {
    return owner;
  }


  public void setOwner(String owner) {
    this.owner = owner;
  }


  public Workflow createdBy(String createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * The email address of the user who created this Workflow
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email address of the user who created this Workflow")

  public String getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public Workflow createdDate(OffsetDateTime createdDate) {
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * The date the workflow was created
   * @return createdDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date the workflow was created")

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public Workflow inputFields(List<Field> inputFields) {
    
    this.inputFields = inputFields;
    return this;
  }

  public Workflow addInputFieldsItem(Field inputFieldsItem) {
    if (this.inputFields == null) {
      this.inputFields = new ArrayList<>();
    }
    this.inputFields.add(inputFieldsItem);
    return this;
  }

   /**
   * A collection of the required and optional input fields  that can be passed to this Workflow when starting it.
   * @return inputFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A collection of the required and optional input fields  that can be passed to this Workflow when starting it.")

  public List<Field> getInputFields() {
    return inputFields;
  }


  public void setInputFields(List<Field> inputFields) {
    this.inputFields = inputFields;
  }


  public Workflow isPublished(Boolean isPublished) {
    
    this.isPublished = isPublished;
    return this;
  }

   /**
   * Indicates whether the Workflow is published; if false, Workflow is in draft mode
   * @return isPublished
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the Workflow is published; if false, Workflow is in draft mode")

  public Boolean getIsPublished() {
    return isPublished;
  }


  public void setIsPublished(Boolean isPublished) {
    this.isPublished = isPublished;
  }


  public Workflow isArchived(Boolean isArchived) {
    
    this.isArchived = isArchived;
    return this;
  }

   /**
   * Indicates whether is Archived and no longer available for users to find, start or edit.
   * @return isArchived
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether is Archived and no longer available for users to find, start or edit.")

  public Boolean getIsArchived() {
    return isArchived;
  }


  public void setIsArchived(Boolean isArchived) {
    this.isArchived = isArchived;
  }


  public Workflow fieldVisibility(FieldVisibility fieldVisibility) {
    
    this.fieldVisibility = fieldVisibility;
    return this;
  }

   /**
   * Get fieldVisibility
   * @return fieldVisibility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FieldVisibility getFieldVisibility() {
    return fieldVisibility;
  }


  public void setFieldVisibility(FieldVisibility fieldVisibility) {
    this.fieldVisibility = fieldVisibility;
  }


  public Workflow instanceVisibility(InstanceVisibilty instanceVisibility) {
    
    this.instanceVisibility = instanceVisibility;
    return this;
  }

   /**
   * Get instanceVisibility
   * @return instanceVisibility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InstanceVisibilty getInstanceVisibility() {
    return instanceVisibility;
  }


  public void setInstanceVisibility(InstanceVisibilty instanceVisibility) {
    this.instanceVisibility = instanceVisibility;
  }


  public Workflow adminUsers(List<String> adminUsers) {
    
    this.adminUsers = adminUsers;
    return this;
  }

  public Workflow addAdminUsersItem(String adminUsersItem) {
    if (this.adminUsers == null) {
      this.adminUsers = new ArrayList<>();
    }
    this.adminUsers.add(adminUsersItem);
    return this;
  }

   /**
   * The users who may view, start, and edit this Workflow in addition to Catalytic.Sdk.Entities.Workflow.Owner
   * @return adminUsers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The users who may view, start, and edit this Workflow in addition to Catalytic.Sdk.Entities.Workflow.Owner")

  public List<String> getAdminUsers() {
    return adminUsers;
  }


  public void setAdminUsers(List<String> adminUsers) {
    this.adminUsers = adminUsers;
  }


  public Workflow standardUsers(List<String> standardUsers) {
    
    this.standardUsers = standardUsers;
    return this;
  }

  public Workflow addStandardUsersItem(String standardUsersItem) {
    if (this.standardUsers == null) {
      this.standardUsers = new ArrayList<>();
    }
    this.standardUsers.add(standardUsersItem);
    return this;
  }

   /**
   * The users who can view and start this Workflow
   * @return standardUsers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The users who can view and start this Workflow")

  public List<String> getStandardUsers() {
    return standardUsers;
  }


  public void setStandardUsers(List<String> standardUsers) {
    this.standardUsers = standardUsers;
  }


  public Workflow taskCountLimit(Integer taskCountLimit) {
    
    this.taskCountLimit = taskCountLimit;
    return this;
  }

   /**
   * The maximum number of steps that can appear in an Instance of this Workflow
   * @return taskCountLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of steps that can appear in an Instance of this Workflow")

  public Integer getTaskCountLimit() {
    return taskCountLimit;
  }


  public void setTaskCountLimit(Integer taskCountLimit) {
    this.taskCountLimit = taskCountLimit;
  }


  public Workflow fieldCountLimit(Integer fieldCountLimit) {
    
    this.fieldCountLimit = fieldCountLimit;
    return this;
  }

   /**
   * The maximum number of fields that can appear in an Instance of this Workflow
   * @return fieldCountLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of fields that can appear in an Instance of this Workflow")

  public Integer getFieldCountLimit() {
    return fieldCountLimit;
  }


  public void setFieldCountLimit(Integer fieldCountLimit) {
    this.fieldCountLimit = fieldCountLimit;
  }


  public Workflow fieldSizeLimit(Integer fieldSizeLimit) {
    
    this.fieldSizeLimit = fieldSizeLimit;
    return this;
  }

   /**
   * The maximum size of data stored in any field in an Instance of this Workflow
   * @return fieldSizeLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum size of data stored in any field in an Instance of this Workflow")

  public Integer getFieldSizeLimit() {
    return fieldSizeLimit;
  }


  public void setFieldSizeLimit(Integer fieldSizeLimit) {
    this.fieldSizeLimit = fieldSizeLimit;
  }


  public Workflow fieldTotalSizeLimit(Integer fieldTotalSizeLimit) {
    
    this.fieldTotalSizeLimit = fieldTotalSizeLimit;
    return this;
  }

   /**
   * The maximum total size of data stored in all fields in an Instance of this Workflow
   * @return fieldTotalSizeLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum total size of data stored in all fields in an Instance of this Workflow")

  public Integer getFieldTotalSizeLimit() {
    return fieldTotalSizeLimit;
  }


  public void setFieldTotalSizeLimit(Integer fieldTotalSizeLimit) {
    this.fieldTotalSizeLimit = fieldTotalSizeLimit;
  }


  public Workflow dataTableRowLimit(Integer dataTableRowLimit) {
    
    this.dataTableRowLimit = dataTableRowLimit;
    return this;
  }

   /**
   * The maximum number of rows of any data table created in an Instance of this Workflow
   * @return dataTableRowLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of rows of any data table created in an Instance of this Workflow")

  public Integer getDataTableRowLimit() {
    return dataTableRowLimit;
  }


  public void setDataTableRowLimit(Integer dataTableRowLimit) {
    this.dataTableRowLimit = dataTableRowLimit;
  }


  public Workflow dataTableColumnLimit(Integer dataTableColumnLimit) {
    
    this.dataTableColumnLimit = dataTableColumnLimit;
    return this;
  }

   /**
   * The maximum number of columns of any data table created in an Instance of this Workflow
   * @return dataTableColumnLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of columns of any data table created in an Instance of this Workflow")

  public Integer getDataTableColumnLimit() {
    return dataTableColumnLimit;
  }


  public void setDataTableColumnLimit(Integer dataTableColumnLimit) {
    this.dataTableColumnLimit = dataTableColumnLimit;
  }


  public Workflow dataTableCellLimit(Integer dataTableCellLimit) {
    
    this.dataTableCellLimit = dataTableCellLimit;
    return this;
  }

   /**
   * The maximum number of cells of any data table created in an Instance of this Workflow
   * @return dataTableCellLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of cells of any data table created in an Instance of this Workflow")

  public Integer getDataTableCellLimit() {
    return dataTableCellLimit;
  }


  public void setDataTableCellLimit(Integer dataTableCellLimit) {
    this.dataTableCellLimit = dataTableCellLimit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Workflow workflow = (Workflow) o;
    return Objects.equals(this.id, workflow.id) &&
        Objects.equals(this.name, workflow.name) &&
        Objects.equals(this.teamName, workflow.teamName) &&
        Objects.equals(this.description, workflow.description) &&
        Objects.equals(this.category, workflow.category) &&
        Objects.equals(this.owner, workflow.owner) &&
        Objects.equals(this.createdBy, workflow.createdBy) &&
        Objects.equals(this.createdDate, workflow.createdDate) &&
        Objects.equals(this.inputFields, workflow.inputFields) &&
        Objects.equals(this.isPublished, workflow.isPublished) &&
        Objects.equals(this.isArchived, workflow.isArchived) &&
        Objects.equals(this.fieldVisibility, workflow.fieldVisibility) &&
        Objects.equals(this.instanceVisibility, workflow.instanceVisibility) &&
        Objects.equals(this.adminUsers, workflow.adminUsers) &&
        Objects.equals(this.standardUsers, workflow.standardUsers) &&
        Objects.equals(this.taskCountLimit, workflow.taskCountLimit) &&
        Objects.equals(this.fieldCountLimit, workflow.fieldCountLimit) &&
        Objects.equals(this.fieldSizeLimit, workflow.fieldSizeLimit) &&
        Objects.equals(this.fieldTotalSizeLimit, workflow.fieldTotalSizeLimit) &&
        Objects.equals(this.dataTableRowLimit, workflow.dataTableRowLimit) &&
        Objects.equals(this.dataTableColumnLimit, workflow.dataTableColumnLimit) &&
        Objects.equals(this.dataTableCellLimit, workflow.dataTableCellLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, teamName, description, category, owner, createdBy, createdDate, inputFields, isPublished, isArchived, fieldVisibility, instanceVisibility, adminUsers, standardUsers, taskCountLimit, fieldCountLimit, fieldSizeLimit, fieldTotalSizeLimit, dataTableRowLimit, dataTableColumnLimit, dataTableCellLimit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Workflow {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    teamName: ").append(toIndentedString(teamName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    inputFields: ").append(toIndentedString(inputFields)).append("\n");
    sb.append("    isPublished: ").append(toIndentedString(isPublished)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    fieldVisibility: ").append(toIndentedString(fieldVisibility)).append("\n");
    sb.append("    instanceVisibility: ").append(toIndentedString(instanceVisibility)).append("\n");
    sb.append("    adminUsers: ").append(toIndentedString(adminUsers)).append("\n");
    sb.append("    standardUsers: ").append(toIndentedString(standardUsers)).append("\n");
    sb.append("    taskCountLimit: ").append(toIndentedString(taskCountLimit)).append("\n");
    sb.append("    fieldCountLimit: ").append(toIndentedString(fieldCountLimit)).append("\n");
    sb.append("    fieldSizeLimit: ").append(toIndentedString(fieldSizeLimit)).append("\n");
    sb.append("    fieldTotalSizeLimit: ").append(toIndentedString(fieldTotalSizeLimit)).append("\n");
    sb.append("    dataTableRowLimit: ").append(toIndentedString(dataTableRowLimit)).append("\n");
    sb.append("    dataTableColumnLimit: ").append(toIndentedString(dataTableColumnLimit)).append("\n");
    sb.append("    dataTableCellLimit: ").append(toIndentedString(dataTableCellLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


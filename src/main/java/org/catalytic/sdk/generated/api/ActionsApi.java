/*
 * Catalytic SDK API
 *  ## API for the Catalytic SDK 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@catalytic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.catalytic.sdk.generated.api;

import org.catalytic.sdk.generated.ApiCallback;
import org.catalytic.sdk.generated.ApiClient;
import org.catalytic.sdk.generated.ApiException;
import org.catalytic.sdk.generated.ApiResponse;
import org.catalytic.sdk.generated.Configuration;
import org.catalytic.sdk.generated.Pair;
import org.catalytic.sdk.generated.ProgressRequestBody;
import org.catalytic.sdk.generated.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.catalytic.sdk.generated.model.Action;
import org.catalytic.sdk.generated.model.ActionInvocation;
import org.catalytic.sdk.generated.model.ActionSearchClause;
import org.catalytic.sdk.generated.model.ActionsPage;
import org.catalytic.sdk.generated.model.InvokeActionRequest;
import org.catalytic.sdk.generated.model.ProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActionsApi {
    private ApiClient localVarApiClient;

    public ActionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getAction
     * @param id The ID of the Action Definition to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActionCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/actions/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActionValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAction(Async)");
        }
        

        okhttp3.Call localVarCall = getActionCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Action Definition
     * Get Action Definition by ID
     * @param id The ID of the Action Definition to get (required)
     * @return Action
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Action getAction(String id) throws ApiException {
        ApiResponse<Action> localVarResp = getActionWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Action Definition
     * Get Action Definition by ID
     * @param id The ID of the Action Definition to get (required)
     * @return ApiResponse&lt;Action&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Action> getActionWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getActionValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Action>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Action Definition (asynchronously)
     * Get Action Definition by ID
     * @param id The ID of the Action Definition to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActionAsync(String id, final ApiCallback<Action> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActionValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Action>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getActionInvocation
     * @param actionId The ID of the Action to get (required)
     * @param actionInvocationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActionInvocationCall(String actionId, String actionInvocationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/actions/{actionId}/invocations/{actionInvocationId}"
            .replaceAll("\\{" + "actionId" + "\\}", localVarApiClient.escapeString(actionId.toString()))
            .replaceAll("\\{" + "actionInvocationId" + "\\}", localVarApiClient.escapeString(actionInvocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActionInvocationValidateBeforeCall(String actionId, String actionInvocationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling getActionInvocation(Async)");
        }
        
        // verify the required parameter 'actionInvocationId' is set
        if (actionInvocationId == null) {
            throw new ApiException("Missing the required parameter 'actionInvocationId' when calling getActionInvocation(Async)");
        }
        

        okhttp3.Call localVarCall = getActionInvocationCall(actionId, actionInvocationId, _callback);
        return localVarCall;

    }

    /**
     * Get Action Invocation
     * Get Action Invocation by ID. If the invocation is completed, this will include outputs.
     * @param actionId The ID of the Action to get (required)
     * @param actionInvocationId  (required)
     * @return ActionInvocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActionInvocation getActionInvocation(String actionId, String actionInvocationId) throws ApiException {
        ApiResponse<ActionInvocation> localVarResp = getActionInvocationWithHttpInfo(actionId, actionInvocationId);
        return localVarResp.getData();
    }

    /**
     * Get Action Invocation
     * Get Action Invocation by ID. If the invocation is completed, this will include outputs.
     * @param actionId The ID of the Action to get (required)
     * @param actionInvocationId  (required)
     * @return ApiResponse&lt;ActionInvocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionInvocation> getActionInvocationWithHttpInfo(String actionId, String actionInvocationId) throws ApiException {
        okhttp3.Call localVarCall = getActionInvocationValidateBeforeCall(actionId, actionInvocationId, null);
        Type localVarReturnType = new TypeToken<ActionInvocation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Action Invocation (asynchronously)
     * Get Action Invocation by ID. If the invocation is completed, this will include outputs.
     * @param actionId The ID of the Action to get (required)
     * @param actionInvocationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActionInvocationAsync(String actionId, String actionInvocationId, final ApiCallback<ActionInvocation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActionInvocationValidateBeforeCall(actionId, actionInvocationId, _callback);
        Type localVarReturnType = new TypeToken<ActionInvocation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invokeAction
     * @param actionId The ID of the action to be invoked (required)
     * @param invokeActionRequest The definition of the action to create (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invokeActionCall(String actionId, InvokeActionRequest invokeActionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = invokeActionRequest;

        // create path and map variables
        String localVarPath = "/api/actions/{actionId}:invoke"
            .replaceAll("\\{" + "actionId" + "\\}", localVarApiClient.escapeString(actionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invokeActionValidateBeforeCall(String actionId, InvokeActionRequest invokeActionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling invokeAction(Async)");
        }
        

        okhttp3.Call localVarCall = invokeActionCall(actionId, invokeActionRequest, _callback);
        return localVarCall;

    }

    /**
     * Invoke Action
     * Directly invoke an Action to be executed by an Action Worker
     * @param actionId The ID of the action to be invoked (required)
     * @param invokeActionRequest The definition of the action to create (optional)
     * @return ActionInvocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActionInvocation invokeAction(String actionId, InvokeActionRequest invokeActionRequest) throws ApiException {
        ApiResponse<ActionInvocation> localVarResp = invokeActionWithHttpInfo(actionId, invokeActionRequest);
        return localVarResp.getData();
    }

    /**
     * Invoke Action
     * Directly invoke an Action to be executed by an Action Worker
     * @param actionId The ID of the action to be invoked (required)
     * @param invokeActionRequest The definition of the action to create (optional)
     * @return ApiResponse&lt;ActionInvocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionInvocation> invokeActionWithHttpInfo(String actionId, InvokeActionRequest invokeActionRequest) throws ApiException {
        okhttp3.Call localVarCall = invokeActionValidateBeforeCall(actionId, invokeActionRequest, null);
        Type localVarReturnType = new TypeToken<ActionInvocation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invoke Action (asynchronously)
     * Directly invoke an Action to be executed by an Action Worker
     * @param actionId The ID of the action to be invoked (required)
     * @param invokeActionRequest The definition of the action to create (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invokeActionAsync(String actionId, InvokeActionRequest invokeActionRequest, final ApiCallback<ActionInvocation> _callback) throws ApiException {

        okhttp3.Call localVarCall = invokeActionValidateBeforeCall(actionId, invokeActionRequest, _callback);
        Type localVarReturnType = new TypeToken<ActionInvocation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchActions
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @param actionSearchClause  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchActionsCall(String pageToken, Integer pageSize, ActionSearchClause actionSearchClause, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = actionSearchClause;

        // create path and map variables
        String localVarPath = "/api/actions/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchActionsValidateBeforeCall(String pageToken, Integer pageSize, ActionSearchClause actionSearchClause, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchActionsCall(pageToken, pageSize, actionSearchClause, _callback);
        return localVarCall;

    }

    /**
     * Search Actions
     * Search for Actions
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @param actionSearchClause  (optional)
     * @return ActionsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ActionsPage searchActions(String pageToken, Integer pageSize, ActionSearchClause actionSearchClause) throws ApiException {
        ApiResponse<ActionsPage> localVarResp = searchActionsWithHttpInfo(pageToken, pageSize, actionSearchClause);
        return localVarResp.getData();
    }

    /**
     * Search Actions
     * Search for Actions
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @param actionSearchClause  (optional)
     * @return ApiResponse&lt;ActionsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionsPage> searchActionsWithHttpInfo(String pageToken, Integer pageSize, ActionSearchClause actionSearchClause) throws ApiException {
        okhttp3.Call localVarCall = searchActionsValidateBeforeCall(pageToken, pageSize, actionSearchClause, null);
        Type localVarReturnType = new TypeToken<ActionsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Actions (asynchronously)
     * Search for Actions
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @param actionSearchClause  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchActionsAsync(String pageToken, Integer pageSize, ActionSearchClause actionSearchClause, final ApiCallback<ActionsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchActionsValidateBeforeCall(pageToken, pageSize, actionSearchClause, _callback);
        Type localVarReturnType = new TypeToken<ActionsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

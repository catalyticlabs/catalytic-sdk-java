/*
 * Catalytic SDK API
 *  ## API for the Catalytic SDK 
 *
 * The version of the OpenAPI document: 1.0.6
 * Contact: developers@catalytic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.catalytic.sdk.generated.api;

import org.catalytic.sdk.generated.ApiCallback;
import org.catalytic.sdk.generated.ApiClient;
import org.catalytic.sdk.generated.ApiException;
import org.catalytic.sdk.generated.ApiResponse;
import org.catalytic.sdk.generated.Configuration;
import org.catalytic.sdk.generated.Pair;
import org.catalytic.sdk.generated.ProgressRequestBody;
import org.catalytic.sdk.generated.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.catalytic.sdk.generated.model.Integration;
import org.catalytic.sdk.generated.model.IntegrationConnection;
import org.catalytic.sdk.generated.model.IntegrationConnectionCreationRequest;
import org.catalytic.sdk.generated.model.IntegrationCreationRequest;
import org.catalytic.sdk.generated.model.IntegrationUpdateRequest;
import org.catalytic.sdk.generated.model.IntegrationsPage;
import org.catalytic.sdk.generated.model.ProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntegrationsApi {
    private ApiClient localVarApiClient;

    public IntegrationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntegrationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createIntegration
     * @param integrationCreationRequest The definition of the action to create (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIntegrationCall(IntegrationCreationRequest integrationCreationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = integrationCreationRequest;

        // create path and map variables
        String localVarPath = "/api/integrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIntegrationValidateBeforeCall(IntegrationCreationRequest integrationCreationRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createIntegrationCall(integrationCreationRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a new Integration
     * 
     * @param integrationCreationRequest The definition of the action to create (optional)
     * @return Integration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Integration createIntegration(IntegrationCreationRequest integrationCreationRequest) throws ApiException {
        ApiResponse<Integration> localVarResp = createIntegrationWithHttpInfo(integrationCreationRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new Integration
     * 
     * @param integrationCreationRequest The definition of the action to create (optional)
     * @return ApiResponse&lt;Integration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integration> createIntegrationWithHttpInfo(IntegrationCreationRequest integrationCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createIntegrationValidateBeforeCall(integrationCreationRequest, null);
        Type localVarReturnType = new TypeToken<Integration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Integration (asynchronously)
     * 
     * @param integrationCreationRequest The definition of the action to create (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIntegrationAsync(IntegrationCreationRequest integrationCreationRequest, final ApiCallback<Integration> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIntegrationValidateBeforeCall(integrationCreationRequest, _callback);
        Type localVarReturnType = new TypeToken<Integration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createIntegrationConnection
     * @param id The ID of the Integration Definition for which a Connection should be created (required)
     * @param integrationConnectionCreationRequest Request containing information used to create the Integration Connection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIntegrationConnectionCall(String id, IntegrationConnectionCreationRequest integrationConnectionCreationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = integrationConnectionCreationRequest;

        // create path and map variables
        String localVarPath = "/api/integrations/{id}/connections"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIntegrationConnectionValidateBeforeCall(String id, IntegrationConnectionCreationRequest integrationConnectionCreationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createIntegrationConnection(Async)");
        }
        

        okhttp3.Call localVarCall = createIntegrationConnectionCall(id, integrationConnectionCreationRequest, _callback);
        return localVarCall;

    }

    /**
     * Creates a new Integration Connection
     * 
     * @param id The ID of the Integration Definition for which a Connection should be created (required)
     * @param integrationConnectionCreationRequest Request containing information used to create the Integration Connection (optional)
     * @return IntegrationConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationConnection createIntegrationConnection(String id, IntegrationConnectionCreationRequest integrationConnectionCreationRequest) throws ApiException {
        ApiResponse<IntegrationConnection> localVarResp = createIntegrationConnectionWithHttpInfo(id, integrationConnectionCreationRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a new Integration Connection
     * 
     * @param id The ID of the Integration Definition for which a Connection should be created (required)
     * @param integrationConnectionCreationRequest Request containing information used to create the Integration Connection (optional)
     * @return ApiResponse&lt;IntegrationConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationConnection> createIntegrationConnectionWithHttpInfo(String id, IntegrationConnectionCreationRequest integrationConnectionCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createIntegrationConnectionValidateBeforeCall(id, integrationConnectionCreationRequest, null);
        Type localVarReturnType = new TypeToken<IntegrationConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new Integration Connection (asynchronously)
     * 
     * @param id The ID of the Integration Definition for which a Connection should be created (required)
     * @param integrationConnectionCreationRequest Request containing information used to create the Integration Connection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIntegrationConnectionAsync(String id, IntegrationConnectionCreationRequest integrationConnectionCreationRequest, final ApiCallback<IntegrationConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIntegrationConnectionValidateBeforeCall(id, integrationConnectionCreationRequest, _callback);
        Type localVarReturnType = new TypeToken<IntegrationConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createIntegrationConnectionUnencoded
     * @param integrationName The name component of the ID of the Integration for which a Connection should be created (required)
     * @param integrationAction The action component of the ID of the Integration for which a Connection should be created (required)
     * @param integrationVersion The version component of the ID of the Integration for which a Connection should be created (required)
     * @param integrationConnectionCreationRequest Request containing information used to create the Integration Connection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIntegrationConnectionUnencodedCall(String integrationName, String integrationAction, String integrationVersion, IntegrationConnectionCreationRequest integrationConnectionCreationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = integrationConnectionCreationRequest;

        // create path and map variables
        String localVarPath = "/api/integrations/{integrationName}/{integrationAction}/{integrationVersion}/connections"
            .replaceAll("\\{" + "integrationName" + "\\}", localVarApiClient.escapeString(integrationName.toString()))
            .replaceAll("\\{" + "integrationAction" + "\\}", localVarApiClient.escapeString(integrationAction.toString()))
            .replaceAll("\\{" + "integrationVersion" + "\\}", localVarApiClient.escapeString(integrationVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIntegrationConnectionUnencodedValidateBeforeCall(String integrationName, String integrationAction, String integrationVersion, IntegrationConnectionCreationRequest integrationConnectionCreationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'integrationName' is set
        if (integrationName == null) {
            throw new ApiException("Missing the required parameter 'integrationName' when calling createIntegrationConnectionUnencoded(Async)");
        }
        
        // verify the required parameter 'integrationAction' is set
        if (integrationAction == null) {
            throw new ApiException("Missing the required parameter 'integrationAction' when calling createIntegrationConnectionUnencoded(Async)");
        }
        
        // verify the required parameter 'integrationVersion' is set
        if (integrationVersion == null) {
            throw new ApiException("Missing the required parameter 'integrationVersion' when calling createIntegrationConnectionUnencoded(Async)");
        }
        

        okhttp3.Call localVarCall = createIntegrationConnectionUnencodedCall(integrationName, integrationAction, integrationVersion, integrationConnectionCreationRequest, _callback);
        return localVarCall;

    }

    /**
     * Creates a new Integration Connection
     * 
     * @param integrationName The name component of the ID of the Integration for which a Connection should be created (required)
     * @param integrationAction The action component of the ID of the Integration for which a Connection should be created (required)
     * @param integrationVersion The version component of the ID of the Integration for which a Connection should be created (required)
     * @param integrationConnectionCreationRequest Request containing information used to create the Integration Connection (optional)
     * @return IntegrationConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationConnection createIntegrationConnectionUnencoded(String integrationName, String integrationAction, String integrationVersion, IntegrationConnectionCreationRequest integrationConnectionCreationRequest) throws ApiException {
        ApiResponse<IntegrationConnection> localVarResp = createIntegrationConnectionUnencodedWithHttpInfo(integrationName, integrationAction, integrationVersion, integrationConnectionCreationRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a new Integration Connection
     * 
     * @param integrationName The name component of the ID of the Integration for which a Connection should be created (required)
     * @param integrationAction The action component of the ID of the Integration for which a Connection should be created (required)
     * @param integrationVersion The version component of the ID of the Integration for which a Connection should be created (required)
     * @param integrationConnectionCreationRequest Request containing information used to create the Integration Connection (optional)
     * @return ApiResponse&lt;IntegrationConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationConnection> createIntegrationConnectionUnencodedWithHttpInfo(String integrationName, String integrationAction, String integrationVersion, IntegrationConnectionCreationRequest integrationConnectionCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createIntegrationConnectionUnencodedValidateBeforeCall(integrationName, integrationAction, integrationVersion, integrationConnectionCreationRequest, null);
        Type localVarReturnType = new TypeToken<IntegrationConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new Integration Connection (asynchronously)
     * 
     * @param integrationName The name component of the ID of the Integration for which a Connection should be created (required)
     * @param integrationAction The action component of the ID of the Integration for which a Connection should be created (required)
     * @param integrationVersion The version component of the ID of the Integration for which a Connection should be created (required)
     * @param integrationConnectionCreationRequest Request containing information used to create the Integration Connection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIntegrationConnectionUnencodedAsync(String integrationName, String integrationAction, String integrationVersion, IntegrationConnectionCreationRequest integrationConnectionCreationRequest, final ApiCallback<IntegrationConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIntegrationConnectionUnencodedValidateBeforeCall(integrationName, integrationAction, integrationVersion, integrationConnectionCreationRequest, _callback);
        Type localVarReturnType = new TypeToken<IntegrationConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIntegration
     * @param id The ID of the Integration to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIntegrationCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIntegrationValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteIntegration(Async)");
        }
        

        okhttp3.Call localVarCall = deleteIntegrationCall(id, _callback);
        return localVarCall;

    }

    /**
     * Deletes a specific Integration
     * 
     * @param id The ID of the Integration to delete (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteIntegration(String id) throws ApiException {
        ApiResponse<Object> localVarResp = deleteIntegrationWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Deletes a specific Integration
     * 
     * @param id The ID of the Integration to delete (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteIntegrationWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteIntegrationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a specific Integration (asynchronously)
     * 
     * @param id The ID of the Integration to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIntegrationAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIntegrationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIntegrationConnection
     * @param integrationId The ID of the Integration to which the Integration Connection belongs (required)
     * @param id The ID of the Integration Definition to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIntegrationConnectionCall(String integrationId, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/{integrationId}/connections/{id}"
            .replaceAll("\\{" + "integrationId" + "\\}", localVarApiClient.escapeString(integrationId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIntegrationConnectionValidateBeforeCall(String integrationId, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'integrationId' is set
        if (integrationId == null) {
            throw new ApiException("Missing the required parameter 'integrationId' when calling deleteIntegrationConnection(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteIntegrationConnection(Async)");
        }
        

        okhttp3.Call localVarCall = deleteIntegrationConnectionCall(integrationId, id, _callback);
        return localVarCall;

    }

    /**
     * Delete an Integration Connection by Id
     * 
     * @param integrationId The ID of the Integration to which the Integration Connection belongs (required)
     * @param id The ID of the Integration Definition to delete (required)
     * @return IntegrationConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationConnection deleteIntegrationConnection(String integrationId, String id) throws ApiException {
        ApiResponse<IntegrationConnection> localVarResp = deleteIntegrationConnectionWithHttpInfo(integrationId, id);
        return localVarResp.getData();
    }

    /**
     * Delete an Integration Connection by Id
     * 
     * @param integrationId The ID of the Integration to which the Integration Connection belongs (required)
     * @param id The ID of the Integration Definition to delete (required)
     * @return ApiResponse&lt;IntegrationConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationConnection> deleteIntegrationConnectionWithHttpInfo(String integrationId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteIntegrationConnectionValidateBeforeCall(integrationId, id, null);
        Type localVarReturnType = new TypeToken<IntegrationConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an Integration Connection by Id (asynchronously)
     * 
     * @param integrationId The ID of the Integration to which the Integration Connection belongs (required)
     * @param id The ID of the Integration Definition to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIntegrationConnectionAsync(String integrationId, String id, final ApiCallback<IntegrationConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIntegrationConnectionValidateBeforeCall(integrationId, id, _callback);
        Type localVarReturnType = new TypeToken<IntegrationConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIntegrationConnectionUnencoded
     * @param integrationName The name component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param integrationAction The action component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param integrationVersion The version component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param id The ID of the Integration Definition to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIntegrationConnectionUnencodedCall(String integrationName, String integrationAction, String integrationVersion, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/{integrationName}/{integrationAction}/{integrationVersion}/connections/{id}"
            .replaceAll("\\{" + "integrationName" + "\\}", localVarApiClient.escapeString(integrationName.toString()))
            .replaceAll("\\{" + "integrationAction" + "\\}", localVarApiClient.escapeString(integrationAction.toString()))
            .replaceAll("\\{" + "integrationVersion" + "\\}", localVarApiClient.escapeString(integrationVersion.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIntegrationConnectionUnencodedValidateBeforeCall(String integrationName, String integrationAction, String integrationVersion, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'integrationName' is set
        if (integrationName == null) {
            throw new ApiException("Missing the required parameter 'integrationName' when calling deleteIntegrationConnectionUnencoded(Async)");
        }
        
        // verify the required parameter 'integrationAction' is set
        if (integrationAction == null) {
            throw new ApiException("Missing the required parameter 'integrationAction' when calling deleteIntegrationConnectionUnencoded(Async)");
        }
        
        // verify the required parameter 'integrationVersion' is set
        if (integrationVersion == null) {
            throw new ApiException("Missing the required parameter 'integrationVersion' when calling deleteIntegrationConnectionUnencoded(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteIntegrationConnectionUnencoded(Async)");
        }
        

        okhttp3.Call localVarCall = deleteIntegrationConnectionUnencodedCall(integrationName, integrationAction, integrationVersion, id, _callback);
        return localVarCall;

    }

    /**
     * Delete an Integration Connection by Id
     * 
     * @param integrationName The name component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param integrationAction The action component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param integrationVersion The version component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param id The ID of the Integration Definition to delete (required)
     * @return IntegrationConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationConnection deleteIntegrationConnectionUnencoded(String integrationName, String integrationAction, String integrationVersion, String id) throws ApiException {
        ApiResponse<IntegrationConnection> localVarResp = deleteIntegrationConnectionUnencodedWithHttpInfo(integrationName, integrationAction, integrationVersion, id);
        return localVarResp.getData();
    }

    /**
     * Delete an Integration Connection by Id
     * 
     * @param integrationName The name component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param integrationAction The action component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param integrationVersion The version component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param id The ID of the Integration Definition to delete (required)
     * @return ApiResponse&lt;IntegrationConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationConnection> deleteIntegrationConnectionUnencodedWithHttpInfo(String integrationName, String integrationAction, String integrationVersion, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteIntegrationConnectionUnencodedValidateBeforeCall(integrationName, integrationAction, integrationVersion, id, null);
        Type localVarReturnType = new TypeToken<IntegrationConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an Integration Connection by Id (asynchronously)
     * 
     * @param integrationName The name component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param integrationAction The action component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param integrationVersion The version component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param id The ID of the Integration Definition to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIntegrationConnectionUnencodedAsync(String integrationName, String integrationAction, String integrationVersion, String id, final ApiCallback<IntegrationConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIntegrationConnectionUnencodedValidateBeforeCall(integrationName, integrationAction, integrationVersion, id, _callback);
        Type localVarReturnType = new TypeToken<IntegrationConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIntegrationUnencoded
     * @param integrationName The name component of the ID of the Integration to get (required)
     * @param integrationAction The action component of the ID of the Integration to get (required)
     * @param integrationVersion The version component of the ID of the Integration to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIntegrationUnencodedCall(String integrationName, String integrationAction, String integrationVersion, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/{integrationName}/{integrationAction}/{integrationVersion}"
            .replaceAll("\\{" + "integrationName" + "\\}", localVarApiClient.escapeString(integrationName.toString()))
            .replaceAll("\\{" + "integrationAction" + "\\}", localVarApiClient.escapeString(integrationAction.toString()))
            .replaceAll("\\{" + "integrationVersion" + "\\}", localVarApiClient.escapeString(integrationVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIntegrationUnencodedValidateBeforeCall(String integrationName, String integrationAction, String integrationVersion, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'integrationName' is set
        if (integrationName == null) {
            throw new ApiException("Missing the required parameter 'integrationName' when calling deleteIntegrationUnencoded(Async)");
        }
        
        // verify the required parameter 'integrationAction' is set
        if (integrationAction == null) {
            throw new ApiException("Missing the required parameter 'integrationAction' when calling deleteIntegrationUnencoded(Async)");
        }
        
        // verify the required parameter 'integrationVersion' is set
        if (integrationVersion == null) {
            throw new ApiException("Missing the required parameter 'integrationVersion' when calling deleteIntegrationUnencoded(Async)");
        }
        

        okhttp3.Call localVarCall = deleteIntegrationUnencodedCall(integrationName, integrationAction, integrationVersion, _callback);
        return localVarCall;

    }

    /**
     * Deletes a specific Integration
     * 
     * @param integrationName The name component of the ID of the Integration to get (required)
     * @param integrationAction The action component of the ID of the Integration to get (required)
     * @param integrationVersion The version component of the ID of the Integration to get (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteIntegrationUnencoded(String integrationName, String integrationAction, String integrationVersion) throws ApiException {
        ApiResponse<Object> localVarResp = deleteIntegrationUnencodedWithHttpInfo(integrationName, integrationAction, integrationVersion);
        return localVarResp.getData();
    }

    /**
     * Deletes a specific Integration
     * 
     * @param integrationName The name component of the ID of the Integration to get (required)
     * @param integrationAction The action component of the ID of the Integration to get (required)
     * @param integrationVersion The version component of the ID of the Integration to get (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteIntegrationUnencodedWithHttpInfo(String integrationName, String integrationAction, String integrationVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteIntegrationUnencodedValidateBeforeCall(integrationName, integrationAction, integrationVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a specific Integration (asynchronously)
     * 
     * @param integrationName The name component of the ID of the Integration to get (required)
     * @param integrationAction The action component of the ID of the Integration to get (required)
     * @param integrationVersion The version component of the ID of the Integration to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIntegrationUnencodedAsync(String integrationName, String integrationAction, String integrationVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIntegrationUnencodedValidateBeforeCall(integrationName, integrationAction, integrationVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findIntegrations
     * @param query Free text query terms to search all attributes for (optional)
     * @param status Run or task status to search for (optional)
     * @param processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param runId RunID (aka Instance ID) to search for (optional)
     * @param owner Run or task owner to search for (optional)
     * @param category Category of process or run to search for (optional)
     * @param participatingUsers Task assignee to search for (optional)
     * @param startedBefore Latest start date of the task or run to search for (optional)
     * @param startedAfter Earliest start date of the task or run to search for (optional)
     * @param endedBefore Latest end date of the task or run to search for (optional)
     * @param endedAfter Earliest end date of the task or run to search for (optional)
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findIntegrationsCall(String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String startedBefore, String startedAfter, String endedBefore, String endedAfter, String pageToken, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (processId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("process_id", processId));
        }

        if (runId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("run_id", runId));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (participatingUsers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("participating_users", participatingUsers));
        }

        if (startedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("started_before", startedBefore));
        }

        if (startedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("started_after", startedAfter));
        }

        if (endedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ended_before", endedBefore));
        }

        if (endedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ended_after", endedAfter));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findIntegrationsValidateBeforeCall(String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String startedBefore, String startedAfter, String endedBefore, String endedAfter, String pageToken, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findIntegrationsCall(query, status, processId, runId, owner, category, participatingUsers, startedBefore, startedAfter, endedBefore, endedAfter, pageToken, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Find Integration
     * 
     * @param query Free text query terms to search all attributes for (optional)
     * @param status Run or task status to search for (optional)
     * @param processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param runId RunID (aka Instance ID) to search for (optional)
     * @param owner Run or task owner to search for (optional)
     * @param category Category of process or run to search for (optional)
     * @param participatingUsers Task assignee to search for (optional)
     * @param startedBefore Latest start date of the task or run to search for (optional)
     * @param startedAfter Earliest start date of the task or run to search for (optional)
     * @param endedBefore Latest end date of the task or run to search for (optional)
     * @param endedAfter Earliest end date of the task or run to search for (optional)
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @return IntegrationsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationsPage findIntegrations(String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String startedBefore, String startedAfter, String endedBefore, String endedAfter, String pageToken, Integer pageSize) throws ApiException {
        ApiResponse<IntegrationsPage> localVarResp = findIntegrationsWithHttpInfo(query, status, processId, runId, owner, category, participatingUsers, startedBefore, startedAfter, endedBefore, endedAfter, pageToken, pageSize);
        return localVarResp.getData();
    }

    /**
     * Find Integration
     * 
     * @param query Free text query terms to search all attributes for (optional)
     * @param status Run or task status to search for (optional)
     * @param processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param runId RunID (aka Instance ID) to search for (optional)
     * @param owner Run or task owner to search for (optional)
     * @param category Category of process or run to search for (optional)
     * @param participatingUsers Task assignee to search for (optional)
     * @param startedBefore Latest start date of the task or run to search for (optional)
     * @param startedAfter Earliest start date of the task or run to search for (optional)
     * @param endedBefore Latest end date of the task or run to search for (optional)
     * @param endedAfter Earliest end date of the task or run to search for (optional)
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @return ApiResponse&lt;IntegrationsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationsPage> findIntegrationsWithHttpInfo(String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String startedBefore, String startedAfter, String endedBefore, String endedAfter, String pageToken, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = findIntegrationsValidateBeforeCall(query, status, processId, runId, owner, category, participatingUsers, startedBefore, startedAfter, endedBefore, endedAfter, pageToken, pageSize, null);
        Type localVarReturnType = new TypeToken<IntegrationsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find Integration (asynchronously)
     * 
     * @param query Free text query terms to search all attributes for (optional)
     * @param status Run or task status to search for (optional)
     * @param processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param runId RunID (aka Instance ID) to search for (optional)
     * @param owner Run or task owner to search for (optional)
     * @param category Category of process or run to search for (optional)
     * @param participatingUsers Task assignee to search for (optional)
     * @param startedBefore Latest start date of the task or run to search for (optional)
     * @param startedAfter Earliest start date of the task or run to search for (optional)
     * @param endedBefore Latest end date of the task or run to search for (optional)
     * @param endedAfter Earliest end date of the task or run to search for (optional)
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findIntegrationsAsync(String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String startedBefore, String startedAfter, String endedBefore, String endedAfter, String pageToken, Integer pageSize, final ApiCallback<IntegrationsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = findIntegrationsValidateBeforeCall(query, status, processId, runId, owner, category, participatingUsers, startedBefore, startedAfter, endedBefore, endedAfter, pageToken, pageSize, _callback);
        Type localVarReturnType = new TypeToken<IntegrationsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIntegration
     * @param id The ID of the Integration to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIntegrationValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIntegration(Async)");
        }
        

        okhttp3.Call localVarCall = getIntegrationCall(id, _callback);
        return localVarCall;

    }

    /**
     * Gets details of a specific Integration definition
     * 
     * @param id The ID of the Integration to get (required)
     * @return Integration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Integration getIntegration(String id) throws ApiException {
        ApiResponse<Integration> localVarResp = getIntegrationWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Gets details of a specific Integration definition
     * 
     * @param id The ID of the Integration to get (required)
     * @return ApiResponse&lt;Integration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integration> getIntegrationWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getIntegrationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Integration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets details of a specific Integration definition (asynchronously)
     * 
     * @param id The ID of the Integration to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationAsync(String id, final ApiCallback<Integration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIntegrationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Integration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIntegrationConnection
     * @param integrationId The ID of the Integration to which the Integration Connection belongs (required)
     * @param id The ID of the Integration Definition to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationConnectionCall(String integrationId, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/{integrationId}/connections/{id}"
            .replaceAll("\\{" + "integrationId" + "\\}", localVarApiClient.escapeString(integrationId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIntegrationConnectionValidateBeforeCall(String integrationId, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'integrationId' is set
        if (integrationId == null) {
            throw new ApiException("Missing the required parameter 'integrationId' when calling getIntegrationConnection(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIntegrationConnection(Async)");
        }
        

        okhttp3.Call localVarCall = getIntegrationConnectionCall(integrationId, id, _callback);
        return localVarCall;

    }

    /**
     * Get an Integration Connection by Id
     * 
     * @param integrationId The ID of the Integration to which the Integration Connection belongs (required)
     * @param id The ID of the Integration Definition to get (required)
     * @return IntegrationConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationConnection getIntegrationConnection(String integrationId, String id) throws ApiException {
        ApiResponse<IntegrationConnection> localVarResp = getIntegrationConnectionWithHttpInfo(integrationId, id);
        return localVarResp.getData();
    }

    /**
     * Get an Integration Connection by Id
     * 
     * @param integrationId The ID of the Integration to which the Integration Connection belongs (required)
     * @param id The ID of the Integration Definition to get (required)
     * @return ApiResponse&lt;IntegrationConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationConnection> getIntegrationConnectionWithHttpInfo(String integrationId, String id) throws ApiException {
        okhttp3.Call localVarCall = getIntegrationConnectionValidateBeforeCall(integrationId, id, null);
        Type localVarReturnType = new TypeToken<IntegrationConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Integration Connection by Id (asynchronously)
     * 
     * @param integrationId The ID of the Integration to which the Integration Connection belongs (required)
     * @param id The ID of the Integration Definition to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationConnectionAsync(String integrationId, String id, final ApiCallback<IntegrationConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIntegrationConnectionValidateBeforeCall(integrationId, id, _callback);
        Type localVarReturnType = new TypeToken<IntegrationConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIntegrationConnectionUnencoded
     * @param integrationName The name component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param integrationAction The action component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param integrationVersion The version component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param id The ID of the Integration Definition to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationConnectionUnencodedCall(String integrationName, String integrationAction, String integrationVersion, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/{integrationName}/{integrationAction}/{integrationVersion}/connections/{id}"
            .replaceAll("\\{" + "integrationName" + "\\}", localVarApiClient.escapeString(integrationName.toString()))
            .replaceAll("\\{" + "integrationAction" + "\\}", localVarApiClient.escapeString(integrationAction.toString()))
            .replaceAll("\\{" + "integrationVersion" + "\\}", localVarApiClient.escapeString(integrationVersion.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIntegrationConnectionUnencodedValidateBeforeCall(String integrationName, String integrationAction, String integrationVersion, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'integrationName' is set
        if (integrationName == null) {
            throw new ApiException("Missing the required parameter 'integrationName' when calling getIntegrationConnectionUnencoded(Async)");
        }
        
        // verify the required parameter 'integrationAction' is set
        if (integrationAction == null) {
            throw new ApiException("Missing the required parameter 'integrationAction' when calling getIntegrationConnectionUnencoded(Async)");
        }
        
        // verify the required parameter 'integrationVersion' is set
        if (integrationVersion == null) {
            throw new ApiException("Missing the required parameter 'integrationVersion' when calling getIntegrationConnectionUnencoded(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIntegrationConnectionUnencoded(Async)");
        }
        

        okhttp3.Call localVarCall = getIntegrationConnectionUnencodedCall(integrationName, integrationAction, integrationVersion, id, _callback);
        return localVarCall;

    }

    /**
     * Get an Integration Connection by Id
     * 
     * @param integrationName The name component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param integrationAction The action component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param integrationVersion The version component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param id The ID of the Integration Definition to get (required)
     * @return IntegrationConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationConnection getIntegrationConnectionUnencoded(String integrationName, String integrationAction, String integrationVersion, String id) throws ApiException {
        ApiResponse<IntegrationConnection> localVarResp = getIntegrationConnectionUnencodedWithHttpInfo(integrationName, integrationAction, integrationVersion, id);
        return localVarResp.getData();
    }

    /**
     * Get an Integration Connection by Id
     * 
     * @param integrationName The name component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param integrationAction The action component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param integrationVersion The version component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param id The ID of the Integration Definition to get (required)
     * @return ApiResponse&lt;IntegrationConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationConnection> getIntegrationConnectionUnencodedWithHttpInfo(String integrationName, String integrationAction, String integrationVersion, String id) throws ApiException {
        okhttp3.Call localVarCall = getIntegrationConnectionUnencodedValidateBeforeCall(integrationName, integrationAction, integrationVersion, id, null);
        Type localVarReturnType = new TypeToken<IntegrationConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Integration Connection by Id (asynchronously)
     * 
     * @param integrationName The name component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param integrationAction The action component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param integrationVersion The version component of the ID of the Integration to which the Integration Connection belongs (required)
     * @param id The ID of the Integration Definition to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationConnectionUnencodedAsync(String integrationName, String integrationAction, String integrationVersion, String id, final ApiCallback<IntegrationConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIntegrationConnectionUnencodedValidateBeforeCall(integrationName, integrationAction, integrationVersion, id, _callback);
        Type localVarReturnType = new TypeToken<IntegrationConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIntegrationUnencoded
     * @param integrationName The name component of the ID of the Integration to get (required)
     * @param integrationAction The action component of the ID of the Integration to get (required)
     * @param integrationVersion The version component of the ID of the Integration to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationUnencodedCall(String integrationName, String integrationAction, String integrationVersion, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/{integrationName}/{integrationAction}/{integrationVersion}"
            .replaceAll("\\{" + "integrationName" + "\\}", localVarApiClient.escapeString(integrationName.toString()))
            .replaceAll("\\{" + "integrationAction" + "\\}", localVarApiClient.escapeString(integrationAction.toString()))
            .replaceAll("\\{" + "integrationVersion" + "\\}", localVarApiClient.escapeString(integrationVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIntegrationUnencodedValidateBeforeCall(String integrationName, String integrationAction, String integrationVersion, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'integrationName' is set
        if (integrationName == null) {
            throw new ApiException("Missing the required parameter 'integrationName' when calling getIntegrationUnencoded(Async)");
        }
        
        // verify the required parameter 'integrationAction' is set
        if (integrationAction == null) {
            throw new ApiException("Missing the required parameter 'integrationAction' when calling getIntegrationUnencoded(Async)");
        }
        
        // verify the required parameter 'integrationVersion' is set
        if (integrationVersion == null) {
            throw new ApiException("Missing the required parameter 'integrationVersion' when calling getIntegrationUnencoded(Async)");
        }
        

        okhttp3.Call localVarCall = getIntegrationUnencodedCall(integrationName, integrationAction, integrationVersion, _callback);
        return localVarCall;

    }

    /**
     * Gets details of a specific Integration definition
     * 
     * @param integrationName The name component of the ID of the Integration to get (required)
     * @param integrationAction The action component of the ID of the Integration to get (required)
     * @param integrationVersion The version component of the ID of the Integration to get (required)
     * @return Integration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Integration getIntegrationUnencoded(String integrationName, String integrationAction, String integrationVersion) throws ApiException {
        ApiResponse<Integration> localVarResp = getIntegrationUnencodedWithHttpInfo(integrationName, integrationAction, integrationVersion);
        return localVarResp.getData();
    }

    /**
     * Gets details of a specific Integration definition
     * 
     * @param integrationName The name component of the ID of the Integration to get (required)
     * @param integrationAction The action component of the ID of the Integration to get (required)
     * @param integrationVersion The version component of the ID of the Integration to get (required)
     * @return ApiResponse&lt;Integration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integration> getIntegrationUnencodedWithHttpInfo(String integrationName, String integrationAction, String integrationVersion) throws ApiException {
        okhttp3.Call localVarCall = getIntegrationUnencodedValidateBeforeCall(integrationName, integrationAction, integrationVersion, null);
        Type localVarReturnType = new TypeToken<Integration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets details of a specific Integration definition (asynchronously)
     * 
     * @param integrationName The name component of the ID of the Integration to get (required)
     * @param integrationAction The action component of the ID of the Integration to get (required)
     * @param integrationVersion The version component of the ID of the Integration to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIntegrationUnencodedAsync(String integrationName, String integrationAction, String integrationVersion, final ApiCallback<Integration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIntegrationUnencodedValidateBeforeCall(integrationName, integrationAction, integrationVersion, _callback);
        Type localVarReturnType = new TypeToken<Integration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateIntegration
     * @param id The id of the action to update (required)
     * @param integrationUpdateRequest The updates to apply to the action (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIntegrationCall(String id, IntegrationUpdateRequest integrationUpdateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = integrationUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/integrations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIntegrationValidateBeforeCall(String id, IntegrationUpdateRequest integrationUpdateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateIntegration(Async)");
        }
        

        okhttp3.Call localVarCall = updateIntegrationCall(id, integrationUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Update an Integration
     * 
     * @param id The id of the action to update (required)
     * @param integrationUpdateRequest The updates to apply to the action (optional)
     * @return Integration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Integration updateIntegration(String id, IntegrationUpdateRequest integrationUpdateRequest) throws ApiException {
        ApiResponse<Integration> localVarResp = updateIntegrationWithHttpInfo(id, integrationUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update an Integration
     * 
     * @param id The id of the action to update (required)
     * @param integrationUpdateRequest The updates to apply to the action (optional)
     * @return ApiResponse&lt;Integration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integration> updateIntegrationWithHttpInfo(String id, IntegrationUpdateRequest integrationUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateIntegrationValidateBeforeCall(id, integrationUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Integration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Integration (asynchronously)
     * 
     * @param id The id of the action to update (required)
     * @param integrationUpdateRequest The updates to apply to the action (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIntegrationAsync(String id, IntegrationUpdateRequest integrationUpdateRequest, final ApiCallback<Integration> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIntegrationValidateBeforeCall(id, integrationUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Integration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateIntegrationUnencoded
     * @param integrationName The name component of the ID of the Integration to get (required)
     * @param integrationAction The action component of the ID of the Integration to get (required)
     * @param integrationVersion The version component of the ID of the Integration to get (required)
     * @param integrationUpdateRequest The updates to apply to the action (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIntegrationUnencodedCall(String integrationName, String integrationAction, String integrationVersion, IntegrationUpdateRequest integrationUpdateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = integrationUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/integrations/{integrationName}/{integrationAction}/{integrationVersion}"
            .replaceAll("\\{" + "integrationName" + "\\}", localVarApiClient.escapeString(integrationName.toString()))
            .replaceAll("\\{" + "integrationAction" + "\\}", localVarApiClient.escapeString(integrationAction.toString()))
            .replaceAll("\\{" + "integrationVersion" + "\\}", localVarApiClient.escapeString(integrationVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIntegrationUnencodedValidateBeforeCall(String integrationName, String integrationAction, String integrationVersion, IntegrationUpdateRequest integrationUpdateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'integrationName' is set
        if (integrationName == null) {
            throw new ApiException("Missing the required parameter 'integrationName' when calling updateIntegrationUnencoded(Async)");
        }
        
        // verify the required parameter 'integrationAction' is set
        if (integrationAction == null) {
            throw new ApiException("Missing the required parameter 'integrationAction' when calling updateIntegrationUnencoded(Async)");
        }
        
        // verify the required parameter 'integrationVersion' is set
        if (integrationVersion == null) {
            throw new ApiException("Missing the required parameter 'integrationVersion' when calling updateIntegrationUnencoded(Async)");
        }
        

        okhttp3.Call localVarCall = updateIntegrationUnencodedCall(integrationName, integrationAction, integrationVersion, integrationUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Update an Integration
     * 
     * @param integrationName The name component of the ID of the Integration to get (required)
     * @param integrationAction The action component of the ID of the Integration to get (required)
     * @param integrationVersion The version component of the ID of the Integration to get (required)
     * @param integrationUpdateRequest The updates to apply to the action (optional)
     * @return Integration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Integration updateIntegrationUnencoded(String integrationName, String integrationAction, String integrationVersion, IntegrationUpdateRequest integrationUpdateRequest) throws ApiException {
        ApiResponse<Integration> localVarResp = updateIntegrationUnencodedWithHttpInfo(integrationName, integrationAction, integrationVersion, integrationUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update an Integration
     * 
     * @param integrationName The name component of the ID of the Integration to get (required)
     * @param integrationAction The action component of the ID of the Integration to get (required)
     * @param integrationVersion The version component of the ID of the Integration to get (required)
     * @param integrationUpdateRequest The updates to apply to the action (optional)
     * @return ApiResponse&lt;Integration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integration> updateIntegrationUnencodedWithHttpInfo(String integrationName, String integrationAction, String integrationVersion, IntegrationUpdateRequest integrationUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateIntegrationUnencodedValidateBeforeCall(integrationName, integrationAction, integrationVersion, integrationUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Integration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Integration (asynchronously)
     * 
     * @param integrationName The name component of the ID of the Integration to get (required)
     * @param integrationAction The action component of the ID of the Integration to get (required)
     * @param integrationVersion The version component of the ID of the Integration to get (required)
     * @param integrationUpdateRequest The updates to apply to the action (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIntegrationUnencodedAsync(String integrationName, String integrationAction, String integrationVersion, IntegrationUpdateRequest integrationUpdateRequest, final ApiCallback<Integration> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIntegrationUnencodedValidateBeforeCall(integrationName, integrationAction, integrationVersion, integrationUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Integration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

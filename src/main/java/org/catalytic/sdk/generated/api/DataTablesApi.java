/*
 * Catalytic SDK API
 *  ## API for the Catalytic SDK 
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: developers@catalytic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.catalytic.sdk.generated.api;

import org.catalytic.sdk.generated.ApiCallback;
import org.catalytic.sdk.generated.ApiClient;
import org.catalytic.sdk.generated.ApiException;
import org.catalytic.sdk.generated.ApiResponse;
import org.catalytic.sdk.generated.Configuration;
import org.catalytic.sdk.generated.Pair;
import org.catalytic.sdk.generated.ProgressRequestBody;
import org.catalytic.sdk.generated.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.catalytic.sdk.generated.model.DataTable;
import org.catalytic.sdk.generated.model.DataTableExportFormat;
import org.catalytic.sdk.generated.model.DataTablesPage;
import java.io.File;
import org.catalytic.sdk.generated.model.ProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataTablesApi {
    private ApiClient localVarApiClient;

    public DataTablesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataTablesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for downloadDataTable
     * @param id The ID of the Data Table to download (required)
     * @param format The format to export the data table in. csv (default) or excel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadDataTableCall(String id, DataTableExportFormat format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tables/{id}/download"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadDataTableValidateBeforeCall(String id, DataTableExportFormat format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling downloadDataTable(Async)");
        }
        

        okhttp3.Call localVarCall = downloadDataTableCall(id, format, _callback);
        return localVarCall;

    }

    /**
     * Download a Data Table as a CSV or Excel file
     * 
     * @param id The ID of the Data Table to download (required)
     * @param format The format to export the data table in. csv (default) or excel (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public File downloadDataTable(String id, DataTableExportFormat format) throws ApiException {
        ApiResponse<File> localVarResp = downloadDataTableWithHttpInfo(id, format);
        return localVarResp.getData();
    }

    /**
     * Download a Data Table as a CSV or Excel file
     * 
     * @param id The ID of the Data Table to download (required)
     * @param format The format to export the data table in. csv (default) or excel (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadDataTableWithHttpInfo(String id, DataTableExportFormat format) throws ApiException {
        okhttp3.Call localVarCall = downloadDataTableValidateBeforeCall(id, format, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download a Data Table as a CSV or Excel file (asynchronously)
     * 
     * @param id The ID of the Data Table to download (required)
     * @param format The format to export the data table in. csv (default) or excel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadDataTableAsync(String id, DataTableExportFormat format, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadDataTableValidateBeforeCall(id, format, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findDataTables
     * @param query Free text query terms to search all attributes for (optional)
     * @param status Run or task status to search for (optional)
     * @param processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param runId RunID (aka Instance ID) to search for (optional)
     * @param owner Run or task owner to search for (optional)
     * @param category Category of process or run to search for (optional)
     * @param participatingUsers Task assignee to search for (optional)
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findDataTablesCall(String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String pageToken, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (processId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("process_id", processId));
        }

        if (runId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("run_id", runId));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (participatingUsers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("participating_users", participatingUsers));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findDataTablesValidateBeforeCall(String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String pageToken, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findDataTablesCall(query, status, processId, runId, owner, category, participatingUsers, pageToken, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Find Data Tables
     * 
     * @param query Free text query terms to search all attributes for (optional)
     * @param status Run or task status to search for (optional)
     * @param processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param runId RunID (aka Instance ID) to search for (optional)
     * @param owner Run or task owner to search for (optional)
     * @param category Category of process or run to search for (optional)
     * @param participatingUsers Task assignee to search for (optional)
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @return DataTablesPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DataTablesPage findDataTables(String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String pageToken, Integer pageSize) throws ApiException {
        ApiResponse<DataTablesPage> localVarResp = findDataTablesWithHttpInfo(query, status, processId, runId, owner, category, participatingUsers, pageToken, pageSize);
        return localVarResp.getData();
    }

    /**
     * Find Data Tables
     * 
     * @param query Free text query terms to search all attributes for (optional)
     * @param status Run or task status to search for (optional)
     * @param processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param runId RunID (aka Instance ID) to search for (optional)
     * @param owner Run or task owner to search for (optional)
     * @param category Category of process or run to search for (optional)
     * @param participatingUsers Task assignee to search for (optional)
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @return ApiResponse&lt;DataTablesPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataTablesPage> findDataTablesWithHttpInfo(String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String pageToken, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = findDataTablesValidateBeforeCall(query, status, processId, runId, owner, category, participatingUsers, pageToken, pageSize, null);
        Type localVarReturnType = new TypeToken<DataTablesPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find Data Tables (asynchronously)
     * 
     * @param query Free text query terms to search all attributes for (optional)
     * @param status Run or task status to search for (optional)
     * @param processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param runId RunID (aka Instance ID) to search for (optional)
     * @param owner Run or task owner to search for (optional)
     * @param category Category of process or run to search for (optional)
     * @param participatingUsers Task assignee to search for (optional)
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findDataTablesAsync(String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String pageToken, Integer pageSize, final ApiCallback<DataTablesPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = findDataTablesValidateBeforeCall(query, status, processId, runId, owner, category, participatingUsers, pageToken, pageSize, _callback);
        Type localVarReturnType = new TypeToken<DataTablesPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataTable
     * @param id The ID of the Data Table to get metadata for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataTableCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tables/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataTableValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDataTable(Async)");
        }
        

        okhttp3.Call localVarCall = getDataTableCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get metadata for a Data Table by ID
     * 
     * @param id The ID of the Data Table to get metadata for (required)
     * @return DataTable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DataTable getDataTable(String id) throws ApiException {
        ApiResponse<DataTable> localVarResp = getDataTableWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get metadata for a Data Table by ID
     * 
     * @param id The ID of the Data Table to get metadata for (required)
     * @return ApiResponse&lt;DataTable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataTable> getDataTableWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getDataTableValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DataTable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metadata for a Data Table by ID (asynchronously)
     * 
     * @param id The ID of the Data Table to get metadata for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataTableAsync(String id, final ApiCallback<DataTable> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataTableValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DataTable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceDataTable
     * @param id The ID of the Data Table to download (required)
     * @param headerRow The row number that contains the column headers. Defaults to 1. (optional, default to 1)
     * @param sheetNumber The number of the sheet to import. Only applies to Excel files. The first sheet is imported by default. (optional, default to 1)
     * @param files  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceDataTableCall(String id, Integer headerRow, Integer sheetNumber, List<File> files, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tables/{id}:replace"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (headerRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("headerRow", headerRow));
        }

        if (sheetNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sheetNumber", sheetNumber));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null) {
            localVarFormParams.put("files", files);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceDataTableValidateBeforeCall(String id, Integer headerRow, Integer sheetNumber, List<File> files, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replaceDataTable(Async)");
        }
        

        okhttp3.Call localVarCall = replaceDataTableCall(id, headerRow, sheetNumber, files, _callback);
        return localVarCall;

    }

    /**
     * Replace a Data Table with contents from a CSV or Excel file
     * 
     * @param id The ID of the Data Table to download (required)
     * @param headerRow The row number that contains the column headers. Defaults to 1. (optional, default to 1)
     * @param sheetNumber The number of the sheet to import. Only applies to Excel files. The first sheet is imported by default. (optional, default to 1)
     * @param files  (optional)
     * @return DataTable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DataTable replaceDataTable(String id, Integer headerRow, Integer sheetNumber, List<File> files) throws ApiException {
        ApiResponse<DataTable> localVarResp = replaceDataTableWithHttpInfo(id, headerRow, sheetNumber, files);
        return localVarResp.getData();
    }

    /**
     * Replace a Data Table with contents from a CSV or Excel file
     * 
     * @param id The ID of the Data Table to download (required)
     * @param headerRow The row number that contains the column headers. Defaults to 1. (optional, default to 1)
     * @param sheetNumber The number of the sheet to import. Only applies to Excel files. The first sheet is imported by default. (optional, default to 1)
     * @param files  (optional)
     * @return ApiResponse&lt;DataTable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataTable> replaceDataTableWithHttpInfo(String id, Integer headerRow, Integer sheetNumber, List<File> files) throws ApiException {
        okhttp3.Call localVarCall = replaceDataTableValidateBeforeCall(id, headerRow, sheetNumber, files, null);
        Type localVarReturnType = new TypeToken<DataTable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a Data Table with contents from a CSV or Excel file (asynchronously)
     * 
     * @param id The ID of the Data Table to download (required)
     * @param headerRow The row number that contains the column headers. Defaults to 1. (optional, default to 1)
     * @param sheetNumber The number of the sheet to import. Only applies to Excel files. The first sheet is imported by default. (optional, default to 1)
     * @param files  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceDataTableAsync(String id, Integer headerRow, Integer sheetNumber, List<File> files, final ApiCallback<DataTable> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceDataTableValidateBeforeCall(id, headerRow, sheetNumber, files, _callback);
        Type localVarReturnType = new TypeToken<DataTable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadDataTable
     * @param tableName The name of the table to create. Defaults to the file name without the extension (optional)
     * @param headerRow The row number that contains the column headers. Defaults to 1. (optional, default to 1)
     * @param sheetNumber The number of the sheet to import. Only applies to Excel files. The first sheet is imported by default. (optional, default to 1)
     * @param files  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDataTableCall(String tableName, Integer headerRow, Integer sheetNumber, List<File> files, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tables:upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tableName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tableName", tableName));
        }

        if (headerRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("headerRow", headerRow));
        }

        if (sheetNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sheetNumber", sheetNumber));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null) {
            localVarFormParams.put("files", files);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadDataTableValidateBeforeCall(String tableName, Integer headerRow, Integer sheetNumber, List<File> files, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = uploadDataTableCall(tableName, headerRow, sheetNumber, files, _callback);
        return localVarCall;

    }

    /**
     * Upload a csv or excel file to create a data table
     * 
     * @param tableName The name of the table to create. Defaults to the file name without the extension (optional)
     * @param headerRow The row number that contains the column headers. Defaults to 1. (optional, default to 1)
     * @param sheetNumber The number of the sheet to import. Only applies to Excel files. The first sheet is imported by default. (optional, default to 1)
     * @param files  (optional)
     * @return DataTable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DataTable uploadDataTable(String tableName, Integer headerRow, Integer sheetNumber, List<File> files) throws ApiException {
        ApiResponse<DataTable> localVarResp = uploadDataTableWithHttpInfo(tableName, headerRow, sheetNumber, files);
        return localVarResp.getData();
    }

    /**
     * Upload a csv or excel file to create a data table
     * 
     * @param tableName The name of the table to create. Defaults to the file name without the extension (optional)
     * @param headerRow The row number that contains the column headers. Defaults to 1. (optional, default to 1)
     * @param sheetNumber The number of the sheet to import. Only applies to Excel files. The first sheet is imported by default. (optional, default to 1)
     * @param files  (optional)
     * @return ApiResponse&lt;DataTable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataTable> uploadDataTableWithHttpInfo(String tableName, Integer headerRow, Integer sheetNumber, List<File> files) throws ApiException {
        okhttp3.Call localVarCall = uploadDataTableValidateBeforeCall(tableName, headerRow, sheetNumber, files, null);
        Type localVarReturnType = new TypeToken<DataTable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a csv or excel file to create a data table (asynchronously)
     * 
     * @param tableName The name of the table to create. Defaults to the file name without the extension (optional)
     * @param headerRow The row number that contains the column headers. Defaults to 1. (optional, default to 1)
     * @param sheetNumber The number of the sheet to import. Only applies to Excel files. The first sheet is imported by default. (optional, default to 1)
     * @param files  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDataTableAsync(String tableName, Integer headerRow, Integer sheetNumber, List<File> files, final ApiCallback<DataTable> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadDataTableValidateBeforeCall(tableName, headerRow, sheetNumber, files, _callback);
        Type localVarReturnType = new TypeToken<DataTable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

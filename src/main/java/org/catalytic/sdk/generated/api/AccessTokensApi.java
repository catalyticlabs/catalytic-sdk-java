/*
 * Catalytic SDK API
 *  ## API for the Catalytic SDK 
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: developers@catalytic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.catalytic.sdk.generated.api;

import org.catalytic.sdk.generated.ApiCallback;
import org.catalytic.sdk.generated.ApiClient;
import org.catalytic.sdk.generated.ApiException;
import org.catalytic.sdk.generated.ApiResponse;
import org.catalytic.sdk.generated.Configuration;
import org.catalytic.sdk.generated.Pair;
import org.catalytic.sdk.generated.ProgressRequestBody;
import org.catalytic.sdk.generated.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.catalytic.sdk.generated.model.AccessToken;
import org.catalytic.sdk.generated.model.AccessTokensPage;
import org.catalytic.sdk.generated.model.ProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccessTokensApi {
    private ApiClient localVarApiClient;

    public AccessTokensApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccessTokensApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for findAccessTokens
     * @param query Free text query terms to search all attributes for (optional)
     * @param status Run or task status to search for (optional)
     * @param processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param runId RunID (aka Instance ID) to search for (optional)
     * @param owner Run or task owner to search for (optional)
     * @param category Category of process or run to search for (optional)
     * @param participatingUsers Task assignee to search for (optional)
     * @param startedBefore Latest start date of the task or run to search for (optional)
     * @param startedAfter Earliest start date of the task or run to search for (optional)
     * @param endedBefore Latest end date of the task or run to search for (optional)
     * @param endedAfter Earliest end date of the task or run to search for (optional)
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAccessTokensCall(String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String startedBefore, String startedAfter, String endedBefore, String endedAfter, String pageToken, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/access-tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (processId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("process_id", processId));
        }

        if (runId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("run_id", runId));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (participatingUsers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("participating_users", participatingUsers));
        }

        if (startedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("started_before", startedBefore));
        }

        if (startedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("started_after", startedAfter));
        }

        if (endedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ended_before", endedBefore));
        }

        if (endedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ended_after", endedAfter));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAccessTokensValidateBeforeCall(String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String startedBefore, String startedAfter, String endedBefore, String endedAfter, String pageToken, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findAccessTokensCall(query, status, processId, runId, owner, category, participatingUsers, startedBefore, startedAfter, endedBefore, endedAfter, pageToken, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Find Access Tokens
     * 
     * @param query Free text query terms to search all attributes for (optional)
     * @param status Run or task status to search for (optional)
     * @param processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param runId RunID (aka Instance ID) to search for (optional)
     * @param owner Run or task owner to search for (optional)
     * @param category Category of process or run to search for (optional)
     * @param participatingUsers Task assignee to search for (optional)
     * @param startedBefore Latest start date of the task or run to search for (optional)
     * @param startedAfter Earliest start date of the task or run to search for (optional)
     * @param endedBefore Latest end date of the task or run to search for (optional)
     * @param endedAfter Earliest end date of the task or run to search for (optional)
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @return AccessTokensPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AccessTokensPage findAccessTokens(String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String startedBefore, String startedAfter, String endedBefore, String endedAfter, String pageToken, Integer pageSize) throws ApiException {
        ApiResponse<AccessTokensPage> localVarResp = findAccessTokensWithHttpInfo(query, status, processId, runId, owner, category, participatingUsers, startedBefore, startedAfter, endedBefore, endedAfter, pageToken, pageSize);
        return localVarResp.getData();
    }

    /**
     * Find Access Tokens
     * 
     * @param query Free text query terms to search all attributes for (optional)
     * @param status Run or task status to search for (optional)
     * @param processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param runId RunID (aka Instance ID) to search for (optional)
     * @param owner Run or task owner to search for (optional)
     * @param category Category of process or run to search for (optional)
     * @param participatingUsers Task assignee to search for (optional)
     * @param startedBefore Latest start date of the task or run to search for (optional)
     * @param startedAfter Earliest start date of the task or run to search for (optional)
     * @param endedBefore Latest end date of the task or run to search for (optional)
     * @param endedAfter Earliest end date of the task or run to search for (optional)
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @return ApiResponse&lt;AccessTokensPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessTokensPage> findAccessTokensWithHttpInfo(String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String startedBefore, String startedAfter, String endedBefore, String endedAfter, String pageToken, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = findAccessTokensValidateBeforeCall(query, status, processId, runId, owner, category, participatingUsers, startedBefore, startedAfter, endedBefore, endedAfter, pageToken, pageSize, null);
        Type localVarReturnType = new TypeToken<AccessTokensPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find Access Tokens (asynchronously)
     * 
     * @param query Free text query terms to search all attributes for (optional)
     * @param status Run or task status to search for (optional)
     * @param processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param runId RunID (aka Instance ID) to search for (optional)
     * @param owner Run or task owner to search for (optional)
     * @param category Category of process or run to search for (optional)
     * @param participatingUsers Task assignee to search for (optional)
     * @param startedBefore Latest start date of the task or run to search for (optional)
     * @param startedAfter Earliest start date of the task or run to search for (optional)
     * @param endedBefore Latest end date of the task or run to search for (optional)
     * @param endedAfter Earliest end date of the task or run to search for (optional)
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAccessTokensAsync(String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String startedBefore, String startedAfter, String endedBefore, String endedAfter, String pageToken, Integer pageSize, final ApiCallback<AccessTokensPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAccessTokensValidateBeforeCall(query, status, processId, runId, owner, category, participatingUsers, startedBefore, startedAfter, endedBefore, endedAfter, pageToken, pageSize, _callback);
        Type localVarReturnType = new TypeToken<AccessTokensPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccessToken
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccessTokenCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/access-tokens/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccessTokenValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAccessToken(Async)");
        }
        

        okhttp3.Call localVarCall = getAccessTokenCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return AccessToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AccessToken getAccessToken(String id) throws ApiException {
        ApiResponse<AccessToken> localVarResp = getAccessTokenWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;AccessToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessToken> getAccessTokenWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getAccessTokenValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccessTokenAsync(String id, final ApiCallback<AccessToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccessTokenValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeAccessToken
     * @param id The public Id of the AccessToken (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeAccessTokenCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/access-tokens/{id}:revoke"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeAccessTokenValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling revokeAccessToken(Async)");
        }
        

        okhttp3.Call localVarCall = revokeAccessTokenCall(id, _callback);
        return localVarCall;

    }

    /**
     * Revoke Access Token
     * 
     * @param id The public Id of the AccessToken (required)
     * @return AccessToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AccessToken revokeAccessToken(String id) throws ApiException {
        ApiResponse<AccessToken> localVarResp = revokeAccessTokenWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Revoke Access Token
     * 
     * @param id The public Id of the AccessToken (required)
     * @return ApiResponse&lt;AccessToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessToken> revokeAccessTokenWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = revokeAccessTokenValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revoke Access Token (asynchronously)
     * 
     * @param id The public Id of the AccessToken (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeAccessTokenAsync(String id, final ApiCallback<AccessToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeAccessTokenValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

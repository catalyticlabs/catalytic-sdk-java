/*
 * Catalytic SDK API
 *  ## API for the Catalytic SDK 
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: developers@catalytic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.catalytic.sdk.generated.api;

import org.catalytic.sdk.generated.ApiCallback;
import org.catalytic.sdk.generated.ApiClient;
import org.catalytic.sdk.generated.ApiException;
import org.catalytic.sdk.generated.ApiResponse;
import org.catalytic.sdk.generated.Configuration;
import org.catalytic.sdk.generated.Pair;
import org.catalytic.sdk.generated.ProgressRequestBody;
import org.catalytic.sdk.generated.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.catalytic.sdk.generated.model.Credentials;
import org.catalytic.sdk.generated.model.CredentialsCreationRequest;
import org.catalytic.sdk.generated.model.CredentialsCreationWithEmailAndPasswordRequest;
import org.catalytic.sdk.generated.model.ProblemDetails;
import org.catalytic.sdk.generated.model.WaitForCredentialsApprovalRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient localVarApiClient;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createAndApproveCredentials
     * @param credentialsCreationWithEmailAndPasswordRequest Params required to create and approve new Credentials (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAndApproveCredentialsCall(CredentialsCreationWithEmailAndPasswordRequest credentialsCreationWithEmailAndPasswordRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = credentialsCreationWithEmailAndPasswordRequest;

        // create path and map variables
        String localVarPath = "/api/auth/create-and-approve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAndApproveCredentialsValidateBeforeCall(CredentialsCreationWithEmailAndPasswordRequest credentialsCreationWithEmailAndPasswordRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createAndApproveCredentialsCall(credentialsCreationWithEmailAndPasswordRequest, _callback);
        return localVarCall;

    }

    /**
     * Create new Credentials using provided Catalytic team domain and Approve using provided email and password.
     * 
     * @param credentialsCreationWithEmailAndPasswordRequest Params required to create and approve new Credentials (optional)
     * @return Credentials
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Credentials createAndApproveCredentials(CredentialsCreationWithEmailAndPasswordRequest credentialsCreationWithEmailAndPasswordRequest) throws ApiException {
        ApiResponse<Credentials> localVarResp = createAndApproveCredentialsWithHttpInfo(credentialsCreationWithEmailAndPasswordRequest);
        return localVarResp.getData();
    }

    /**
     * Create new Credentials using provided Catalytic team domain and Approve using provided email and password.
     * 
     * @param credentialsCreationWithEmailAndPasswordRequest Params required to create and approve new Credentials (optional)
     * @return ApiResponse&lt;Credentials&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Credentials> createAndApproveCredentialsWithHttpInfo(CredentialsCreationWithEmailAndPasswordRequest credentialsCreationWithEmailAndPasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = createAndApproveCredentialsValidateBeforeCall(credentialsCreationWithEmailAndPasswordRequest, null);
        Type localVarReturnType = new TypeToken<Credentials>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new Credentials using provided Catalytic team domain and Approve using provided email and password. (asynchronously)
     * 
     * @param credentialsCreationWithEmailAndPasswordRequest Params required to create and approve new Credentials (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAndApproveCredentialsAsync(CredentialsCreationWithEmailAndPasswordRequest credentialsCreationWithEmailAndPasswordRequest, final ApiCallback<Credentials> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAndApproveCredentialsValidateBeforeCall(credentialsCreationWithEmailAndPasswordRequest, _callback);
        Type localVarReturnType = new TypeToken<Credentials>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCredentials
     * @param credentialsCreationRequest Params required to create new Credentials (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCredentialsCall(CredentialsCreationRequest credentialsCreationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = credentialsCreationRequest;

        // create path and map variables
        String localVarPath = "/api/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCredentialsValidateBeforeCall(CredentialsCreationRequest credentialsCreationRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createCredentialsCall(credentialsCreationRequest, _callback);
        return localVarCall;

    }

    /**
     * Create new Credentials in the provided Catalytic team domain.  Credentials must be approved prior to use.
     * 
     * @param credentialsCreationRequest Params required to create new Credentials (optional)
     * @return Credentials
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Credentials createCredentials(CredentialsCreationRequest credentialsCreationRequest) throws ApiException {
        ApiResponse<Credentials> localVarResp = createCredentialsWithHttpInfo(credentialsCreationRequest);
        return localVarResp.getData();
    }

    /**
     * Create new Credentials in the provided Catalytic team domain.  Credentials must be approved prior to use.
     * 
     * @param credentialsCreationRequest Params required to create new Credentials (optional)
     * @return ApiResponse&lt;Credentials&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Credentials> createCredentialsWithHttpInfo(CredentialsCreationRequest credentialsCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createCredentialsValidateBeforeCall(credentialsCreationRequest, null);
        Type localVarReturnType = new TypeToken<Credentials>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new Credentials in the provided Catalytic team domain.  Credentials must be approved prior to use. (asynchronously)
     * 
     * @param credentialsCreationRequest Params required to create new Credentials (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCredentialsAsync(CredentialsCreationRequest credentialsCreationRequest, final ApiCallback<Credentials> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCredentialsValidateBeforeCall(credentialsCreationRequest, _callback);
        Type localVarReturnType = new TypeToken<Credentials>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitForCredentialsApproval
     * @param waitForCredentialsApprovalRequest Params required to poll approved Credentials (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitForCredentialsApprovalCall(WaitForCredentialsApprovalRequest waitForCredentialsApprovalRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = waitForCredentialsApprovalRequest;

        // create path and map variables
        String localVarPath = "/api/auth/wait-for-approval";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitForCredentialsApprovalValidateBeforeCall(WaitForCredentialsApprovalRequest waitForCredentialsApprovalRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = waitForCredentialsApprovalCall(waitForCredentialsApprovalRequest, _callback);
        return localVarCall;

    }

    /**
     * Wait until Credentials are approved
     * 
     * @param waitForCredentialsApprovalRequest Params required to poll approved Credentials (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object waitForCredentialsApproval(WaitForCredentialsApprovalRequest waitForCredentialsApprovalRequest) throws ApiException {
        ApiResponse<Object> localVarResp = waitForCredentialsApprovalWithHttpInfo(waitForCredentialsApprovalRequest);
        return localVarResp.getData();
    }

    /**
     * Wait until Credentials are approved
     * 
     * @param waitForCredentialsApprovalRequest Params required to poll approved Credentials (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> waitForCredentialsApprovalWithHttpInfo(WaitForCredentialsApprovalRequest waitForCredentialsApprovalRequest) throws ApiException {
        okhttp3.Call localVarCall = waitForCredentialsApprovalValidateBeforeCall(waitForCredentialsApprovalRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Wait until Credentials are approved (asynchronously)
     * 
     * @param waitForCredentialsApprovalRequest Params required to poll approved Credentials (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitForCredentialsApprovalAsync(WaitForCredentialsApprovalRequest waitForCredentialsApprovalRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitForCredentialsApprovalValidateBeforeCall(waitForCredentialsApprovalRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

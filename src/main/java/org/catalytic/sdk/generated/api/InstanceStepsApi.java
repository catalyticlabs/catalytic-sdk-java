/*
 * Catalytic SDK API
 *  ## API for the Catalytic SDK 
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: developers@catalytic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.catalytic.sdk.generated.api;

import org.catalytic.sdk.generated.ApiCallback;
import org.catalytic.sdk.generated.ApiClient;
import org.catalytic.sdk.generated.ApiException;
import org.catalytic.sdk.generated.ApiResponse;
import org.catalytic.sdk.generated.Configuration;
import org.catalytic.sdk.generated.Pair;
import org.catalytic.sdk.generated.ProgressRequestBody;
import org.catalytic.sdk.generated.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.catalytic.sdk.generated.model.CompleteStepRequest;
import org.catalytic.sdk.generated.model.InstanceStep;
import org.catalytic.sdk.generated.model.InstanceStepsPage;
import org.catalytic.sdk.generated.model.ProblemDetails;
import org.catalytic.sdk.generated.model.ReassignStepRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InstanceStepsApi {
    private ApiClient localVarApiClient;

    public InstanceStepsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InstanceStepsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for completeStep
     * @param id The ID of the Instance Step to complete (required)
     * @param instanceId  (required)
     * @param completeStepRequest The values of the fields to complete the task with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeStepCall(String id, String instanceId, CompleteStepRequest completeStepRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = completeStepRequest;

        // create path and map variables
        String localVarPath = "/api/instances/{instanceId}/steps/{id}:complete"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "instanceId" + "\\}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeStepValidateBeforeCall(String id, String instanceId, CompleteStepRequest completeStepRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling completeStep(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling completeStep(Async)");
        }
        

        okhttp3.Call localVarCall = completeStepCall(id, instanceId, completeStepRequest, _callback);
        return localVarCall;

    }

    /**
     * Completes an Instance Step
     * 
     * @param id The ID of the Instance Step to complete (required)
     * @param instanceId  (required)
     * @param completeStepRequest The values of the fields to complete the task with (optional)
     * @return InstanceStep
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public InstanceStep completeStep(String id, String instanceId, CompleteStepRequest completeStepRequest) throws ApiException {
        ApiResponse<InstanceStep> localVarResp = completeStepWithHttpInfo(id, instanceId, completeStepRequest);
        return localVarResp.getData();
    }

    /**
     * Completes an Instance Step
     * 
     * @param id The ID of the Instance Step to complete (required)
     * @param instanceId  (required)
     * @param completeStepRequest The values of the fields to complete the task with (optional)
     * @return ApiResponse&lt;InstanceStep&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstanceStep> completeStepWithHttpInfo(String id, String instanceId, CompleteStepRequest completeStepRequest) throws ApiException {
        okhttp3.Call localVarCall = completeStepValidateBeforeCall(id, instanceId, completeStepRequest, null);
        Type localVarReturnType = new TypeToken<InstanceStep>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Completes an Instance Step (asynchronously)
     * 
     * @param id The ID of the Instance Step to complete (required)
     * @param instanceId  (required)
     * @param completeStepRequest The values of the fields to complete the task with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeStepAsync(String id, String instanceId, CompleteStepRequest completeStepRequest, final ApiCallback<InstanceStep> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeStepValidateBeforeCall(id, instanceId, completeStepRequest, _callback);
        Type localVarReturnType = new TypeToken<InstanceStep>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findInstanceSteps
     * @param instanceId The ID of the Instance (required)
     * @param query Free text query terms to search all attributes for (optional)
     * @param status Run or task status to search for (optional)
     * @param processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param runId RunID (aka Instance ID) to search for (optional)
     * @param owner Run or task owner to search for (optional)
     * @param category Category of process or run to search for (optional)
     * @param participatingUsers Task assignee to search for (optional)
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findInstanceStepsCall(String instanceId, String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String pageToken, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/instances/{instanceId}/steps"
            .replaceAll("\\{" + "instanceId" + "\\}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (processId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("process_id", processId));
        }

        if (runId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("run_id", runId));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (participatingUsers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("participating_users", participatingUsers));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findInstanceStepsValidateBeforeCall(String instanceId, String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String pageToken, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling findInstanceSteps(Async)");
        }
        

        okhttp3.Call localVarCall = findInstanceStepsCall(instanceId, query, status, processId, runId, owner, category, participatingUsers, pageToken, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Find Instance Steps
     * 
     * @param instanceId The ID of the Instance (required)
     * @param query Free text query terms to search all attributes for (optional)
     * @param status Run or task status to search for (optional)
     * @param processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param runId RunID (aka Instance ID) to search for (optional)
     * @param owner Run or task owner to search for (optional)
     * @param category Category of process or run to search for (optional)
     * @param participatingUsers Task assignee to search for (optional)
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @return InstanceStepsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public InstanceStepsPage findInstanceSteps(String instanceId, String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String pageToken, Integer pageSize) throws ApiException {
        ApiResponse<InstanceStepsPage> localVarResp = findInstanceStepsWithHttpInfo(instanceId, query, status, processId, runId, owner, category, participatingUsers, pageToken, pageSize);
        return localVarResp.getData();
    }

    /**
     * Find Instance Steps
     * 
     * @param instanceId The ID of the Instance (required)
     * @param query Free text query terms to search all attributes for (optional)
     * @param status Run or task status to search for (optional)
     * @param processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param runId RunID (aka Instance ID) to search for (optional)
     * @param owner Run or task owner to search for (optional)
     * @param category Category of process or run to search for (optional)
     * @param participatingUsers Task assignee to search for (optional)
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @return ApiResponse&lt;InstanceStepsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstanceStepsPage> findInstanceStepsWithHttpInfo(String instanceId, String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String pageToken, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = findInstanceStepsValidateBeforeCall(instanceId, query, status, processId, runId, owner, category, participatingUsers, pageToken, pageSize, null);
        Type localVarReturnType = new TypeToken<InstanceStepsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find Instance Steps (asynchronously)
     * 
     * @param instanceId The ID of the Instance (required)
     * @param query Free text query terms to search all attributes for (optional)
     * @param status Run or task status to search for (optional)
     * @param processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param runId RunID (aka Instance ID) to search for (optional)
     * @param owner Run or task owner to search for (optional)
     * @param category Category of process or run to search for (optional)
     * @param participatingUsers Task assignee to search for (optional)
     * @param pageToken The token representing the result page to get (optional)
     * @param pageSize The page size requested (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findInstanceStepsAsync(String instanceId, String query, String status, String processId, String runId, String owner, String category, String participatingUsers, String pageToken, Integer pageSize, final ApiCallback<InstanceStepsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = findInstanceStepsValidateBeforeCall(instanceId, query, status, processId, runId, owner, category, participatingUsers, pageToken, pageSize, _callback);
        Type localVarReturnType = new TypeToken<InstanceStepsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInstanceStep
     * @param id The ID of the Instance Steps to get (required)
     * @param instanceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInstanceStepCall(String id, String instanceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/instances/{instanceId}/steps/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "instanceId" + "\\}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstanceStepValidateBeforeCall(String id, String instanceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInstanceStep(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling getInstanceStep(Async)");
        }
        

        okhttp3.Call localVarCall = getInstanceStepCall(id, instanceId, _callback);
        return localVarCall;

    }

    /**
     * Gets details of a specific Instance Step
     * 
     * @param id The ID of the Instance Steps to get (required)
     * @param instanceId  (required)
     * @return InstanceStep
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public InstanceStep getInstanceStep(String id, String instanceId) throws ApiException {
        ApiResponse<InstanceStep> localVarResp = getInstanceStepWithHttpInfo(id, instanceId);
        return localVarResp.getData();
    }

    /**
     * Gets details of a specific Instance Step
     * 
     * @param id The ID of the Instance Steps to get (required)
     * @param instanceId  (required)
     * @return ApiResponse&lt;InstanceStep&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstanceStep> getInstanceStepWithHttpInfo(String id, String instanceId) throws ApiException {
        okhttp3.Call localVarCall = getInstanceStepValidateBeforeCall(id, instanceId, null);
        Type localVarReturnType = new TypeToken<InstanceStep>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets details of a specific Instance Step (asynchronously)
     * 
     * @param id The ID of the Instance Steps to get (required)
     * @param instanceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInstanceStepAsync(String id, String instanceId, final ApiCallback<InstanceStep> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstanceStepValidateBeforeCall(id, instanceId, _callback);
        Type localVarReturnType = new TypeToken<InstanceStep>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reassignStep
     * @param id The ID of the Instance Step to reassign (required)
     * @param instanceId  (required)
     * @param reassignStepRequest Contains the email address of the user to reassign the Instance Step to (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reassignStepCall(String id, String instanceId, ReassignStepRequest reassignStepRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = reassignStepRequest;

        // create path and map variables
        String localVarPath = "/api/instances/{instanceId}/steps/{id}:reassign"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "instanceId" + "\\}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reassignStepValidateBeforeCall(String id, String instanceId, ReassignStepRequest reassignStepRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reassignStep(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling reassignStep(Async)");
        }
        

        okhttp3.Call localVarCall = reassignStepCall(id, instanceId, reassignStepRequest, _callback);
        return localVarCall;

    }

    /**
     * Reassigns a Instance Step
     * 
     * @param id The ID of the Instance Step to reassign (required)
     * @param instanceId  (required)
     * @param reassignStepRequest Contains the email address of the user to reassign the Instance Step to (optional)
     * @return InstanceStep
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public InstanceStep reassignStep(String id, String instanceId, ReassignStepRequest reassignStepRequest) throws ApiException {
        ApiResponse<InstanceStep> localVarResp = reassignStepWithHttpInfo(id, instanceId, reassignStepRequest);
        return localVarResp.getData();
    }

    /**
     * Reassigns a Instance Step
     * 
     * @param id The ID of the Instance Step to reassign (required)
     * @param instanceId  (required)
     * @param reassignStepRequest Contains the email address of the user to reassign the Instance Step to (optional)
     * @return ApiResponse&lt;InstanceStep&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstanceStep> reassignStepWithHttpInfo(String id, String instanceId, ReassignStepRequest reassignStepRequest) throws ApiException {
        okhttp3.Call localVarCall = reassignStepValidateBeforeCall(id, instanceId, reassignStepRequest, null);
        Type localVarReturnType = new TypeToken<InstanceStep>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reassigns a Instance Step (asynchronously)
     * 
     * @param id The ID of the Instance Step to reassign (required)
     * @param instanceId  (required)
     * @param reassignStepRequest Contains the email address of the user to reassign the Instance Step to (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reassignStepAsync(String id, String instanceId, ReassignStepRequest reassignStepRequest, final ApiCallback<InstanceStep> _callback) throws ApiException {

        okhttp3.Call localVarCall = reassignStepValidateBeforeCall(id, instanceId, reassignStepRequest, _callback);
        Type localVarReturnType = new TypeToken<InstanceStep>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for snoozeStep
     * @param id The ID of the Instance Step to snooze (required)
     * @param instanceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call snoozeStepCall(String id, String instanceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/instances/{instanceId}/steps/{id}:snooze"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "instanceId" + "\\}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call snoozeStepValidateBeforeCall(String id, String instanceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling snoozeStep(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling snoozeStep(Async)");
        }
        

        okhttp3.Call localVarCall = snoozeStepCall(id, instanceId, _callback);
        return localVarCall;

    }

    /**
     * Snooze a pending Instance Step
     * 
     * @param id The ID of the Instance Step to snooze (required)
     * @param instanceId  (required)
     * @return InstanceStep
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public InstanceStep snoozeStep(String id, String instanceId) throws ApiException {
        ApiResponse<InstanceStep> localVarResp = snoozeStepWithHttpInfo(id, instanceId);
        return localVarResp.getData();
    }

    /**
     * Snooze a pending Instance Step
     * 
     * @param id The ID of the Instance Step to snooze (required)
     * @param instanceId  (required)
     * @return ApiResponse&lt;InstanceStep&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstanceStep> snoozeStepWithHttpInfo(String id, String instanceId) throws ApiException {
        okhttp3.Call localVarCall = snoozeStepValidateBeforeCall(id, instanceId, null);
        Type localVarReturnType = new TypeToken<InstanceStep>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Snooze a pending Instance Step (asynchronously)
     * 
     * @param id The ID of the Instance Step to snooze (required)
     * @param instanceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call snoozeStepAsync(String id, String instanceId, final ApiCallback<InstanceStep> _callback) throws ApiException {

        okhttp3.Call localVarCall = snoozeStepValidateBeforeCall(id, instanceId, _callback);
        Type localVarReturnType = new TypeToken<InstanceStep>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startStep
     * @param id The ID of the Instance Step to start (required)
     * @param instanceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startStepCall(String id, String instanceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/instances/{instanceId}/steps/{id}:start"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "instanceId" + "\\}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startStepValidateBeforeCall(String id, String instanceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling startStep(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling startStep(Async)");
        }
        

        okhttp3.Call localVarCall = startStepCall(id, instanceId, _callback);
        return localVarCall;

    }

    /**
     * Starts a pending Instance Step
     * 
     * @param id The ID of the Instance Step to start (required)
     * @param instanceId  (required)
     * @return InstanceStep
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public InstanceStep startStep(String id, String instanceId) throws ApiException {
        ApiResponse<InstanceStep> localVarResp = startStepWithHttpInfo(id, instanceId);
        return localVarResp.getData();
    }

    /**
     * Starts a pending Instance Step
     * 
     * @param id The ID of the Instance Step to start (required)
     * @param instanceId  (required)
     * @return ApiResponse&lt;InstanceStep&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstanceStep> startStepWithHttpInfo(String id, String instanceId) throws ApiException {
        okhttp3.Call localVarCall = startStepValidateBeforeCall(id, instanceId, null);
        Type localVarReturnType = new TypeToken<InstanceStep>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Starts a pending Instance Step (asynchronously)
     * 
     * @param id The ID of the Instance Step to start (required)
     * @param instanceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startStepAsync(String id, String instanceId, final ApiCallback<InstanceStep> _callback) throws ApiException {

        okhttp3.Call localVarCall = startStepValidateBeforeCall(id, instanceId, _callback);
        Type localVarReturnType = new TypeToken<InstanceStep>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
